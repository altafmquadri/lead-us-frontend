{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/MetricsContainer.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport WeeklyAppointmentsMetric from './WeeklyAppointmentsMetric';\nimport WeeklyProduction from './WeeklyProduction';\n\nclass MetricsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: [],\n      currentDate: moment(),\n      appointments: [],\n      appointmentDates: [],\n      filteredAppointmentDatesByWeek: [],\n      daysOfWeek: [],\n      countOfApptInDaysOfWeek: [],\n      lineChartData: {},\n      weekAppointments: [],\n      presentations: [],\n      weeklySales: [],\n      polarChartData: {}\n    };\n\n    this.getDaysOfTheWeek = () => {\n      let beginningOfWeek = moment().startOf('week');\n      let daysOfWeek = []; //used knowledge of today's date and the start of the week to iterate days to the end of the week\n\n      daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'));\n\n      for (let i = 1; i < 7; i++) {\n        daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'));\n      }\n\n      return daysOfWeek;\n    };\n\n    this.countOfApptInDaysOfWeek = (a, b) => {\n      let counts = [];\n\n      for (let i = 0; i < a.length; i++) {\n        let count = 0;\n\n        for (let j = 0; j < b.length; j++) {\n          if (moment(b[j]).isSame(moment(a[i]))) {\n            count++;\n          }\n        }\n\n        counts.push(count);\n      }\n\n      return counts;\n    };\n\n    this.getWeeklyPresentations = () => {\n      let filteredAppointmentsByWeek = this.state.appointments.filter(appointment => moment(appointment.date).isSame(this.state.currentDate, 'week'));\n      let salesonWeeklyAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['made_sale?']);\n      this.setState({\n        weekAppointments: filteredAppointmentsByWeek,\n        weeklySales: salesonWeeklyAppointments\n      }, () => this.setState({\n        polarChartData: this.setPolarChartData()\n      }));\n      let presentationAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['presentation_made?']);\n      return presentationAppointments;\n    };\n\n    this.setLineChartData = () => {\n      const chartData = {\n        labels: this.state.daysOfWeek,\n        datasets: [{\n          label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n          data: this.state.countOfApptInDaysOfWeek,\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return chartData;\n    };\n\n    this.setPolarChartData = () => {\n      const polarChartData = {\n        labels: ['Appointments', 'Presentations', 'Sales'],\n        datasets: [{\n          label: `$Weekly Presentation`,\n          data: [this.state.weekAppointments.length, this.state.presentations.length, this.state.weeklySales.length],\n          backgroundColor: ['rgba(153, 102, 255, 0.2)', 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return polarChartData;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      currentUser: this.props.currentUser,\n      appointments: this.props.appointments,\n      presentations: this.getWeeklyPresentations()\n    });\n    let newDates, filteredAppointmentDatesByWeek; //take all appointments\n\n    newDates = this.props.appointments.map(appointment => appointment.date); //take appointments and filter them by current week\n    //compare today's date with the array of appointments\n\n    filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'));\n    this.setState({\n      appointmentDates: [...this.state.appointmentDates, ...newDates],\n      filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n      daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()]\n    }, () => this.setState({\n      countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]\n    }, () => this.setState({\n      lineChartData: _objectSpread({}, this.setLineChartData())\n    })));\n  }\n\n  render() {\n    // console.log(this.state.currentUser)\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"metrics-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Metrics\"), React.createElement(WeeklyAppointmentsMetric, {\n      lineChartData: this.state.lineChartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(WeeklyProduction, {\n      polarChartData: this.state.polarChartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MetricsContainer;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/MetricsContainer.js"],"names":["React","moment","WeeklyAppointmentsMetric","WeeklyProduction","MetricsContainer","Component","state","currentUser","currentDate","appointments","appointmentDates","filteredAppointmentDatesByWeek","daysOfWeek","countOfApptInDaysOfWeek","lineChartData","weekAppointments","presentations","weeklySales","polarChartData","getDaysOfTheWeek","beginningOfWeek","startOf","push","format","i","add","a","b","counts","length","count","j","isSame","getWeeklyPresentations","filteredAppointmentsByWeek","filter","appointment","date","salesonWeeklyAppointments","setState","setPolarChartData","presentationAppointments","setLineChartData","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","componentDidMount","props","newDates","map","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment'\nimport WeeklyAppointmentsMetric from './WeeklyAppointmentsMetric';\nimport WeeklyProduction from './WeeklyProduction';\n\nclass MetricsContainer extends React.Component {\n    state = { \n        currentUser: [],\n        currentDate: moment(),\n        appointments: [],\n        appointmentDates: [],\n        filteredAppointmentDatesByWeek: [],\n        daysOfWeek: [],\n        countOfApptInDaysOfWeek: [],\n        lineChartData: {},\n        weekAppointments: [],\n        presentations: [],\n        weeklySales: [],\n        polarChartData: {}\n     }\n\n    componentDidMount() {\n        this.setState(\n            { \n                currentUser: this.props.currentUser,\n                appointments: this.props.appointments,\n                presentations: this.getWeeklyPresentations()\n            },)\n            let newDates, filteredAppointmentDatesByWeek\n            //take all appointments\n            newDates = this.props.appointments.map(appointment => appointment.date)\n            //take appointments and filter them by current week\n            //compare today's date with the array of appointments\n            filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'))\n            this.setState(\n                { \n                    appointmentDates: [...this.state.appointmentDates, ...newDates],\n                    filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n                    daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()],\n                }, () => this.setState(\n                    {\n                        countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]  \n                    }, () => this.setState({ lineChartData: {...this.setLineChartData()}  })))\n    }\n\n    getDaysOfTheWeek = () => {\n        let beginningOfWeek = moment().startOf('week')\n        let daysOfWeek = []\n        //used knowledge of today's date and the start of the week to iterate days to the end of the week\n        daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n        for (let i = 1; i < 7; i++) {\n            daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n        }\n        return daysOfWeek\n    }\n\n    // console.log(moment().isSame(moment('2019-12-23'),'date'))\n    countOfApptInDaysOfWeek = (a, b) => {\n        let counts = []\n        for (let i = 0; i < a.length; i++) {\n            let count = 0;\n            for (let j = 0; j < b.length; j++) {\n                if (moment(b[j]).isSame(moment(a[i]))) {\n                    count++\n                }\n            }\n            counts.push(count)\n        }\n        return counts\n    }\n\n    getWeeklyPresentations = () => {\n        let filteredAppointmentsByWeek = this.state.appointments.filter(appointment => moment(appointment.date).isSame(this.state.currentDate, 'week'))\n        let salesonWeeklyAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['made_sale?'])\n        this.setState(\n            { \n                weekAppointments: filteredAppointmentsByWeek,\n                weeklySales: salesonWeeklyAppointments  \n            }, () => this.setState({ polarChartData: this.setPolarChartData()  }));\n        let presentationAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['presentation_made?'])\n        return presentationAppointments\n    }\n\n    setLineChartData = () => {\n        const chartData = {\n            labels: this.state.daysOfWeek,\n            datasets: [\n                {\n                    label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n                    data: this.state.countOfApptInDaysOfWeek,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n        }\n        return chartData\n    }\n\n    setPolarChartData = () => {\n        const polarChartData = {\n            labels: ['Appointments', 'Presentations', 'Sales'],\n            datasets: [\n                {\n                    label: `$Weekly Presentation`,\n                    data: [this.state.weekAppointments.length, this.state.presentations.length, this.state.weeklySales.length],\n                    backgroundColor: [\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n        }\n        return polarChartData\n    }\n\n\n\n\n\n\n\n\n\n    render() { \n        // console.log(this.state.currentUser)\n        return ( \n            <div>\n\n            \n            <div className=\"metrics-page\">\n                <h1>Metrics</h1>\n            \n                <WeeklyAppointmentsMetric lineChartData={this.state.lineChartData}/>\n            </div>\n                <WeeklyProduction polarChartData={this.state.polarChartData}/>\n            </div>\n        );\n    }\n}\n \nexport default MetricsContainer;"]},"metadata":{},"sourceType":"module"}