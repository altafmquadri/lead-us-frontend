{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/WeeklyAppointmentsMetric.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Line } from 'react-chartjs-2';\n\nclass WeeklyAppointmentsMetric extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: this.props.currentUser,\n      currentDate: moment() // appointmentDates: [],\n      // filteredAppointmentDatesByWeek: [],\n      // daysOfWeek: [],\n      // countOfApptInDaysOfWeek: [],\n      // lineChartData: {}\n\n    };\n\n    this.getDaysOfTheWeek = () => {\n      let beginningOfWeek = moment().startOf('week');\n      let daysOfWeek = []; //used knowledge of today's date and the start of the week to iterate days to the end of the week\n\n      daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'));\n\n      for (let i = 1; i < 7; i++) {\n        daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'));\n      }\n\n      return daysOfWeek;\n    };\n\n    this.countOfApptInDaysOfWeek = (a, b) => {\n      let counts = [];\n\n      for (let i = 0; i < a.length; i++) {\n        let count = 0;\n\n        for (let j = 0; j < b.length; j++) {\n          if (moment(b[j]).isSame(moment(a[i]))) {\n            count++;\n          }\n        }\n\n        counts.push(count);\n      }\n\n      return counts;\n    };\n\n    this.setLineChartData = () => {\n      const chartData = {\n        labels: this.state.daysOfWeek,\n        datasets: [{\n          label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n          data: this.state.countOfApptInDaysOfWeek,\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return chartData;\n    };\n  }\n\n  componentDidMount() {\n    let newDates, filteredAppointmentDatesByWeek; //take all appointments\n\n    newDates = this.props.appointments.map(appointment => appointment.date); //take appointments and filter them by current week\n    //compare today's date with the array of appointments\n\n    filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'));\n    this.setState({\n      appointmentDates: [...this.state.appointmentDates, ...newDates],\n      filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n      daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()]\n    }, () => this.setState({\n      countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]\n    }, () => this.setState({\n      lineChartData: _objectSpread({}, this.setLineChartData())\n    })));\n  }\n\n  render() {\n    // console.log('i am the state ',this.state)\n    // console.log('i am the daysOfWeek ',this.state.daysOfWeek[0])\n    // console.log(this.state.currentDate.toDate())\n    // let beginningOfWeek = moment().startOf('week').add(6, 'days').toDate()\n    // let endOfWeek = moment().endOf('week').date()\n    // console.log('i am the days of the week ',this.getDaysOfTheWeek())\n    // console.log(this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek))\n    return React.createElement(\"div\", {\n      className: \"weekly-appointments-metric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Weekly Appointments\"), React.createElement(Line, {\n      data: this.state.lineChartData,\n      options: {\n        scales: {\n          yAxes: [{\n            display: true,\n            ticks: {\n              beginAtZero: true,\n              stepSize: 1\n            }\n          }]\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WeeklyAppointmentsMetric;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/WeeklyAppointmentsMetric.js"],"names":["React","Component","moment","Line","WeeklyAppointmentsMetric","state","currentUser","props","currentDate","getDaysOfTheWeek","beginningOfWeek","startOf","daysOfWeek","push","format","i","add","countOfApptInDaysOfWeek","a","b","counts","length","count","j","isSame","setLineChartData","chartData","labels","datasets","label","filteredAppointmentDatesByWeek","data","backgroundColor","borderColor","borderWidth","componentDidMount","newDates","appointments","map","appointment","date","filter","setState","appointmentDates","lineChartData","render","scales","yAxes","display","ticks","beginAtZero","stepSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment'\nimport { Line } from 'react-chartjs-2'\n\nclass WeeklyAppointmentsMetric extends Component {\n    state = { \n        currentUser: this.props.currentUser,\n        currentDate: moment(),\n        // appointmentDates: [],\n        // filteredAppointmentDatesByWeek: [],\n        // daysOfWeek: [],\n        // countOfApptInDaysOfWeek: [],\n        // lineChartData: {}\n    }\n\n    componentDidMount() {\n        let newDates, filteredAppointmentDatesByWeek\n        //take all appointments\n        newDates = this.props.appointments.map(appointment => appointment.date)\n        //take appointments and filter them by current week\n        //compare today's date with the array of appointments\n        filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'))\n        this.setState(\n            { \n                appointmentDates: [...this.state.appointmentDates, ...newDates],\n                filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n                daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()],\n            }, () => this.setState(\n                {\n                    countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]  \n                }, () => this.setState({ lineChartData: {...this.setLineChartData()}  })))\n    }\n\n    getDaysOfTheWeek = () => {\n        let beginningOfWeek = moment().startOf('week')\n        let daysOfWeek = []\n        //used knowledge of today's date and the start of the week to iterate days to the end of the week\n        daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n        for (let i = 1; i < 7; i++) {\n            daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n        }\n        return daysOfWeek\n    }\n\n    // console.log(moment().isSame(moment('2019-12-23'),'date'))\n    countOfApptInDaysOfWeek = (a, b) => {\n        let counts = []\n        for (let i = 0; i < a.length; i++) {\n            let count = 0;\n            for (let j = 0; j < b.length; j++) {\n                if (moment(b[j]).isSame(moment(a[i]))) {\n                    count++\n                }\n            }\n            counts.push(count)\n        }\n        return counts\n    }\n\n    setLineChartData = () => {\n        const chartData = {\n            labels: this.state.daysOfWeek,\n            datasets: [\n                {\n                    label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n                    data: this.state.countOfApptInDaysOfWeek,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n        }\n        return chartData\n    }\n\n\n    render() {\n        \n        // console.log('i am the state ',this.state)\n        // console.log('i am the daysOfWeek ',this.state.daysOfWeek[0])\n        // console.log(this.state.currentDate.toDate())\n        \n        // let beginningOfWeek = moment().startOf('week').add(6, 'days').toDate()\n        // let endOfWeek = moment().endOf('week').date()\n        // console.log('i am the days of the week ',this.getDaysOfTheWeek())\n        // console.log(this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek))\n\n       \n       \n        return ( \n                <div className=\"weekly-appointments-metric\">\n                    <h2>Weekly Appointments</h2>\n                    <Line \n                        data={this.state.lineChartData}\n                        options={{\n                            scales: {\n                                yAxes: [{\n                                    display: true,\n                                    ticks: {\n                                        beginAtZero: true,\n                                        stepSize: 1\n                                    }\n                                }]\n                            }\n                        }}\n                    />\n                </div>\n        );\n    }\n}\n\nexport default WeeklyAppointmentsMetric;"]},"metadata":{},"sourceType":"module"}