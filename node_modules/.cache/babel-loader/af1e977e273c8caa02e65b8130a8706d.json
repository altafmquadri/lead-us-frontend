{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/App.js\";\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport MainContainer from './containers/MainContainer';\nimport NewLeadContainer from './containers/NewLeadContainer';\nimport LeadActivityContainer from './containers/LeadActivityContainer';\nimport SignupForm from './components/SignupForm';\nimport LoginForm from './components/LoginForm';\nimport Profile from './containers/Profile';\nimport MetricsContainer from './containers/MetricsContainer';\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nconst api = 'http://localhost:3000/api/v1/auto_login';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: null,\n      leads: [],\n      calls: [],\n      appointments: [],\n      clickedLead: [],\n      clickedLeadCalls: [],\n      clickedLeadAppointments: [],\n      archived: [],\n      appointmentSales: [],\n      sales: [],\n      pastClients: [],\n      loading: true\n    };\n\n    this.setCurrentUser = user => {\n      this.setState({\n        currentUser: user,\n        leads: user.leads.filter(leads => !leads['lead_archived?'] && !leads['sale_made?']),\n        archived: user.leads.filter(leads => leads['lead_archived?']),\n        pastClients: user.leads.filter(leads => leads['sale_made?']),\n        calls: user.calls,\n        appointments: user.appointments,\n        appointmentSales: user.appointments.filter(appointments => appointments['made_sale?']),\n        sales: user.sales\n      }, () => {\n        localStorage.user_id = user.id;\n        this.props.history.push('/');\n      });\n    };\n\n    this.logoutUser = () => {\n      this.setState({\n        currentUser: null\n      }, () => {\n        localStorage.removeItem('user_id');\n        localStorage.clear();\n        this.props.history.push('/login');\n      });\n    };\n\n    this.findLeadName = id => {\n      if (id === undefined) return;\n      let name, lead;\n      let found = this.state.leads.find(lead => lead.id === id); // found ? lead = this.state.leads.find(lead => lead.id === id)\n      //   : !found ? lead = this.state.pastClients.find(lead => lead.id === id)\n      //   : lead = this.state.archived.find(lead.id === id)\n\n      if (found) {\n        lead = this.state.leads.find(lead => lead.id === id);\n      } else if (found === undefined) {\n        lead = this.state.pastClients.find(lead => lead.id === id);\n      } else {\n        lead = this.state.archived.find(lead.id === id);\n      } // let found \n      //   this.state.leads.find(lead => lead.id === id) !== undefined ? \n      //     found = this.state.leads.find(lead => lead.id === id) \n      //     : \n      //     this.state.pastClients.find(lead => lead.id === id) !== undefined ?\n      //         found = this.state.pastClients.find(lead => lead.id === id)\n      //         :\n      //         found = this.state.archived.find(lead.id === id)\n\n\n      if (!lead) return;\n      name = `${lead.first_name} ${lead.last_name}`;\n      return name;\n    };\n\n    this.onLeadClick = leadData => {\n      if (leadData.lead.id === undefined) return; //not sure i need this condition, bc setstate was wrong for archive lead\n\n      this.setState({\n        clickedLead: leadData.lead,\n        clickedLeadCalls: this.state.calls.filter(calls => calls.lead_id === leadData.lead.id),\n        clickedLeadAppointments: this.state.appointments.filter(appointments => appointments.lead_id === leadData.lead.id)\n      }, () => {\n        this.props.history.push(`/leads/${leadData.lead.id}`);\n      });\n    };\n\n    this.addNewLead = newLead => {\n      this.setState(_objectSpread({}, this.state, {\n        leads: [...this.state.leads, newLead]\n      }));\n    };\n\n    this.archiveLead = lead => {\n      this.setState(_objectSpread({}, this.state, {\n        leads: [...this.state.leads.filter(stateLead => stateLead.id !== lead.id)],\n        archived: [...this.state.archived, lead]\n      }));\n    };\n\n    this.addNewCall = newCall => {\n      this.setState(_objectSpread({}, this.state, {\n        calls: [...this.state.calls, newCall],\n        clickedLeadCalls: [...this.state.clickedLeadCalls, newCall]\n      }));\n    };\n\n    this.addNewAppointment = newAppointment => {\n      this.setState(_objectSpread({}, this.state, {\n        appointments: [...this.state.appointments, newAppointment],\n        clickedLeadAppointments: [...this.state.clickedLeadAppointments, newAppointment]\n      }));\n    };\n\n    this.editTheAppointment = appointment => {\n      this.setState(_objectSpread({}, this.state, {\n        appointments: [...this.state.appointments.map(stateAppointment => {\n          if (stateAppointment.id === appointment.id) {\n            return appointment;\n          } else {\n            return stateAppointment;\n          }\n        })],\n        clickedLeadAppointments: [...this.state.clickedLeadAppointments.map(stateAppointment => {\n          if (stateAppointment.id === appointment.id) {\n            return appointment;\n          } else {\n            return stateAppointment;\n          }\n        })]\n      }), () => this.setState(_objectSpread({}, this.state, {\n        // appointments: [...this.state.appointments.filter(appointments => !appointments['made_sale?'])],\n        appointmentSales: [...this.state.appointments.filter(appointments => appointments['made_sale?'])]\n      })));\n    };\n\n    this.editCallNoApp = call => {\n      this.setState(_objectSpread({}, this.state, {\n        calls: [...this.state.calls.map(stateCall => {\n          if (stateCall.id === call.id) {\n            return call;\n          } else {\n            return stateCall;\n          }\n        })],\n        clickedLeadCalls: [...this.state.clickedLeadCalls.map(stateCall => {\n          if (stateCall.id === call.id) {\n            return call;\n          } else {\n            return stateCall;\n          }\n        })]\n      }));\n    };\n\n    this.addSale = sale => {\n      this.setState(_objectSpread({}, this.state, {\n        sales: [...this.state.sales, sale],\n        leads: [...this.state.leads.filter(leads => !leads['sale_made?'])]\n      }));\n    };\n\n    this.addPastClient = lead => {\n      this.setState({\n        pastClients: [...this.state.pastClients, lead],\n        leads: [...this.state.leads.filter(stateLeads => stateLeads.id !== lead.id)]\n      });\n    };\n  }\n\n  //End of Functions written to add lead activity ***********************************************************************************\n  componentDidMount() {\n    //setup for auto_login\n    const user_id = localStorage.user_id;\n\n    if (user_id) {\n      fetch(api, {\n        headers: {\n          \"Authorization\": user_id\n        }\n      }).then(res => res.json()).then(user => this.setCurrentUser(user)).then(this.setState({\n        loading: false,\n        clickedLead: [],\n        clickedLeadCalls: [],\n        clickedLeadAppointments: [],\n        appointments: this.state.appointments.filter(appointment => !this.state.archived.map(archiveLead => archiveLead.id).includes(appointment.lead_id))\n      }));\n    }\n  }\n\n  render() {\n    // this.testFunction()\n    // console.log(\"i am clicked lead calls\",this.state.clickedLeadCalls)\n    console.log(this.state.currentUser); // console.log(this.state.currentUser.leads)\n    // console.log(this.state.appointments)\n    // console.log(this.state)\n    // console.log(this.state.leads)\n    // console.log(this.state.archived)\n    // console.log(this.props, 'I am in App')\n\n    if (this.state.loading) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"main-page-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      currentUser: this.state.currentUser,\n      logoutUser: this.logoutUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/leads/:id\",\n      render: routerProps => React.createElement(LeadActivityContainer, Object.assign({\n        currentUser: this.state.currentUser,\n        lead: this.state.clickedLead,\n        calls: this.state.clickedLeadCalls,\n        clickedLeadAppointments: this.state.clickedLeadAppointments,\n        addNewCall: this.addNewCall,\n        addNewAppointment: this.addNewAppointment,\n        editCallNoApp: this.editCallNoApp,\n        editTheAppointment: this.editTheAppointment,\n        addSale: this.addSale,\n        archiveLead: this.archiveLead,\n        addPastClient: this.addPastClient\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({}, routerProps, {\n        currentUser: this.state.currentUser,\n        archived: this.state.archived,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/metrics\",\n      render: routerProps => React.createElement(MetricsContainer, Object.assign({}, routerProps, {\n        currentUser: this.state.currentUser,\n        sales: this.state.sales,\n        appointments: this.state.appointments,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/new\",\n      render: routerProps => React.createElement(NewLeadContainer, Object.assign({\n        currentUser: this.state.currentUser,\n        addNewLead: this.addNewLead\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signup\",\n      render: routerProps => React.createElement(SignupForm, Object.assign({}, routerProps, {\n        setCurrentUser: this.setCurrentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      render: routerProps => React.createElement(LoginForm, Object.assign({}, routerProps, {\n        setCurrentUser: this.setCurrentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routerProps => React.createElement(MainContainer, Object.assign({\n        leads: this.state.leads,\n        onLeadClick: this.onLeadClick,\n        currentUser: this.state.currentUser,\n        appointments: this.state.appointments,\n        findLeadName: this.findLeadName\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/App.js"],"names":["React","Navbar","MainContainer","NewLeadContainer","LeadActivityContainer","SignupForm","LoginForm","Profile","MetricsContainer","Switch","Route","withRouter","api","App","Component","state","currentUser","leads","calls","appointments","clickedLead","clickedLeadCalls","clickedLeadAppointments","archived","appointmentSales","sales","pastClients","loading","setCurrentUser","user","setState","filter","localStorage","user_id","id","props","history","push","logoutUser","removeItem","clear","findLeadName","undefined","name","lead","found","find","first_name","last_name","onLeadClick","leadData","lead_id","addNewLead","newLead","archiveLead","stateLead","addNewCall","newCall","addNewAppointment","newAppointment","editTheAppointment","appointment","map","stateAppointment","editCallNoApp","call","stateCall","addSale","sale","addPastClient","stateLeads","componentDidMount","fetch","headers","then","res","json","includes","render","console","log","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './components/Navbar'\nimport MainContainer from './containers/MainContainer';\nimport NewLeadContainer from './containers/NewLeadContainer';\nimport LeadActivityContainer from './containers/LeadActivityContainer';\nimport SignupForm from './components/SignupForm';\nimport LoginForm from './components/LoginForm';\nimport Profile from './containers/Profile'\nimport MetricsContainer from './containers/MetricsContainer'\n\nimport {Switch, Route, withRouter } from \"react-router-dom\";\n\nconst api = 'http://localhost:3000/api/v1/auto_login'\n\nclass App extends React.Component {\n\n  state = { \n    currentUser: null,\n    leads: [],\n    calls: [],\n    appointments: [],\n    clickedLead: [],\n    clickedLeadCalls: [],\n    clickedLeadAppointments: [],\n    archived: [],\n    appointmentSales: [],\n    sales: [],\n    pastClients: [],\n    loading: true\n}\n\n\nsetCurrentUser = (user) => {\n  this.setState(\n    { \n      currentUser: user,\n      leads: user.leads.filter(leads => !leads['lead_archived?'] && !leads['sale_made?']),\n      archived: user.leads.filter(leads => leads['lead_archived?']),\n      pastClients: user.leads.filter(leads => leads['sale_made?']),\n      calls: user.calls,\n      appointments: user.appointments, \n      appointmentSales: user.appointments.filter(appointments => appointments['made_sale?']),\n      sales: user.sales\n    }, () => {\n      localStorage.user_id = user.id\n      this.props.history.push('/')\n    })\n}\n\n// testFunction = () => {\n//   let allApps = this.state.appointments\n//   let archivedLeads = this.state.archived\n//   console.log('appointments' , allApps )\n//   console.log('archivedLeads' , archivedLeads )\n\n//   // let archivedLeadids = archivedLeads.map(archiveLead => archiveLead.id)\n//   // console.log('archivedLeadids' , archivedLeadids )\n\n//   // let filteredApps = allApps.filter(appointment => !archivedLeadids.includes( appointment.lead_id) )\n//   // console.log('filteredApps ' , filteredApps )\n\n//   let filteredApps = this.state.appointments.filter(appointment => (!(this.state.archived.map(archiveLead => archiveLead.id)).includes(appointment.lead_id)))\n//   console.log('filteredApps ' , filteredApps )\n// }\n\nlogoutUser = () => {\n  this.setState({ currentUser: null  }, () => {\n    localStorage.removeItem('user_id')\n    localStorage.clear()\n    this.props.history.push('/login')\n  })\n}\n\n//Functions written to add lead activity ***************************************************************************************\n\nfindLeadName = (id) => {\n  if (id === undefined) return\n  let name, lead\n  let found = this.state.leads.find(lead => lead.id === id)\n  // found ? lead = this.state.leads.find(lead => lead.id === id)\n  //   : !found ? lead = this.state.pastClients.find(lead => lead.id === id)\n  //   : lead = this.state.archived.find(lead.id === id)\n\n\n if (found) {\n  lead = this.state.leads.find(lead => lead.id === id)\n} else if (found === undefined){\n  lead = this.state.pastClients.find(lead => lead.id === id)\n} else {\n  lead = this.state.archived.find(lead.id === id)\n  }\n\n// let found \n//   this.state.leads.find(lead => lead.id === id) !== undefined ? \n//     found = this.state.leads.find(lead => lead.id === id) \n//     : \n//     this.state.pastClients.find(lead => lead.id === id) !== undefined ?\n//         found = this.state.pastClients.find(lead => lead.id === id)\n//         :\n//         found = this.state.archived.find(lead.id === id)\n\n  if (!lead) return\n  name = `${lead.first_name} ${lead.last_name}`\n  return name\n}\n\n// findLeadName = (id) => {\n//   let found, lead \n//   console.log(this.state)\n//     this.state.leads.find(lead => lead.id === id) !== undefined ? \n//       found = this.state.leads.find(lead => lead.id === id) \n//       : \n//       this.state.pastClients.find(lead => lead.id === id) !== undefined ?\n//           found = this.state.pastClients.find(lead => lead.id === id)\n//           :\n//           found = this.state.archived.find(lead.id === id)\n//           console.log(found)\n//           // console.log(this.state)\n//     return `${found.first_name} ${found.last_name}`\n//   }\n\n//to point us to the lead show page\n  onLeadClick = (leadData) => {\n\n    if (leadData.lead.id === undefined) return  //not sure i need this condition, bc setstate was wrong for archive lead\n    this.setState(\n      { \n        clickedLead: leadData.lead,\n        clickedLeadCalls: this.state.calls.filter(calls => calls.lead_id === leadData.lead.id), \n        clickedLeadAppointments: this.state.appointments.filter(appointments => appointments.lead_id === leadData.lead.id)\n      }, () => {\n      this.props.history.push(`/leads/${leadData.lead.id}`)\n    }) \n  }\n  //triggered by new lead form\n  addNewLead = (newLead) => {\n    this.setState (\n      {\n        ...this.state, \n        leads:  [...this.state.leads, newLead]\n        \n      }) \n  }\n\n  archiveLead = (lead) => {\n    this.setState(\n      {\n        ...this.state,\n        leads: [...this.state.leads.filter(stateLead => stateLead.id !== lead.id )],\n        archived: [...this.state.archived, lead],  \n      })\n  }\n\n  //triggered by user clicking on the phone number\n  addNewCall = (newCall) => {\n  this.setState(\n    {\n      ...this.state,\n      calls: [...this.state.calls, newCall],\n      clickedLeadCalls: [...this.state.clickedLeadCalls, newCall]  \n    });\n  }\n\n  addNewAppointment = (newAppointment) => {\n  this.setState(\n    {\n      ...this.state,\n      appointments: [...this.state.appointments, newAppointment],\n      clickedLeadAppointments: [...this.state.clickedLeadAppointments, newAppointment]  \n    });\n  }\n\n  editTheAppointment = (appointment) => {\n    this.setState(\n      { \n        ...this.state,\n        appointments: [...this.state.appointments.map(stateAppointment => {\n          if (stateAppointment.id === appointment.id) {\n            return appointment\n          } else {\n            return stateAppointment\n          }\n        })],\n        clickedLeadAppointments: [...this.state.clickedLeadAppointments.map(stateAppointment => {\n          if (stateAppointment.id === appointment.id) {\n            return appointment\n          } else {\n            return stateAppointment\n          }\n        })]\n      }, () => this.setState(\n        { \n          ...this.state,\n          // appointments: [...this.state.appointments.filter(appointments => !appointments['made_sale?'])],\n          appointmentSales: [...this.state.appointments.filter(appointments => appointments['made_sale?'])]  \n        }))\n  }\n\n  //written for the cancel button on appointment form\n  editCallNoApp = (call) => {\n    this.setState(\n      { \n        ...this.state,\n        calls: [...this.state.calls.map(stateCall => {\n            if (stateCall.id === call.id) {\n              return call\n            } else {\n              return stateCall\n            }\n        })],  \n        clickedLeadCalls: [...this.state.clickedLeadCalls.map(stateCall => {\n          if (stateCall.id === call.id) {\n            return call\n          } else {\n            return stateCall\n          }\n      })]\n    });\n  }\n\n  addSale = (sale) => {\n    this.setState(\n      { \n        ...this.state,\n        sales: [...this.state.sales, sale],\n        leads: [...this.state.leads.filter(leads => !leads['sale_made?'])] \n      })\n  }\n\n  addPastClient = (lead) => {\n    this.setState(\n      {   \n        pastClients: [...this.state.pastClients, lead],\n        leads: [...this.state.leads.filter(stateLeads => stateLeads.id !== lead.id)]\n      })\n  }\n\n //End of Functions written to add lead activity ***********************************************************************************\n\ncomponentDidMount() {\n  //setup for auto_login\n\n  const user_id = localStorage.user_id\n  if (user_id) {\n    \n    fetch(api, {\n      headers: {\n        \"Authorization\": user_id\n      }\n    }).then(res => res.json()).then(user => this.setCurrentUser(user)).then(\n      this.setState(\n        { \n          loading: false, \n          clickedLead: [],\n          clickedLeadCalls: [],\n          clickedLeadAppointments: [],\n          appointments: this.state.appointments.filter(appointment => (!(this.state.archived.map(archiveLead => archiveLead.id)).includes(appointment.lead_id)))\n        })\n    )\n  }\n\n  \n    \n}\n\n  render() {\n    // this.testFunction()\n    // console.log(\"i am clicked lead calls\",this.state.clickedLeadCalls)\n    console.log(this.state.currentUser)\n    // console.log(this.state.currentUser.leads)\n    // console.log(this.state.appointments)\n    // console.log(this.state)\n    // console.log(this.state.leads)\n    // console.log(this.state.archived)\n    // console.log(this.props, 'I am in App')\n\n    if (this.state.loading) {\n      return <h1>Loading...</h1>\n    }\n\n    return (\n      <div className=\"main-page-container\">\n          <div>\n              <Navbar currentUser={this.state.currentUser} logoutUser={this.logoutUser}/>\n\n              <Switch>\n              \n                <Route path=\"/leads/:id\" render={(routerProps) => <LeadActivityContainer \n                currentUser={this.state.currentUser}\n                lead={this.state.clickedLead}\n                calls={this.state.clickedLeadCalls}\n                clickedLeadAppointments={this.state.clickedLeadAppointments}\n                addNewCall={this.addNewCall}\n                addNewAppointment={this.addNewAppointment}\n                editCallNoApp={this.editCallNoApp}\n                editTheAppointment={this.editTheAppointment}\n                addSale={this.addSale}\n                archiveLead={this.archiveLead}\n                addPastClient={this.addPastClient}\n                {...routerProps}/> }></Route>\n\n                <Route path=\"/profile\" render={(routerProps) => \n                <Profile {...routerProps} \n                currentUser={this.state.currentUser}\n                archived={this.state.archived}/>}></Route>\n\n\n                <Route path=\"/metrics\" render={(routerProps) => <MetricsContainer\n                  {...routerProps} \n                  currentUser={this.state.currentUser}\n                  sales={this.state.sales}\n                  appointments={this.state.appointments}/>}></Route>\n\n                <Route path=\"/new\" render={(routerProps) => <NewLeadContainer\n                currentUser={this.state.currentUser} \n                addNewLead={this.addNewLead} \n                {...routerProps}/>}></Route> \n\n                <Route path=\"/signup\" render={(routerProps) => <SignupForm {...routerProps} setCurrentUser={this.setCurrentUser}/>}></Route>\n\n                <Route path=\"/login\" render={(routerProps) => <LoginForm {...routerProps} setCurrentUser={this.setCurrentUser}/>}></Route>\n\n                <Route exact path=\"/\" render={(routerProps) =>  <MainContainer \n                leads={this.state.leads} onLeadClick={this.onLeadClick} currentUser={this.state.currentUser}\n                appointments={this.state.appointments} findLeadName={this.findLeadName}\n                {...routerProps}/>}></Route>\n\n              </Switch>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}