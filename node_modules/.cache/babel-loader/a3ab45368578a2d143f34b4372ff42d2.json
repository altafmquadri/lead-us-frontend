{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js\";\nimport React, { Component, Fragment } from 'react';\nimport ReactMapGL, { Marker, FlyToInterpolator } from 'react-map-gl';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {\n        width: 980,\n        height: 350,\n        latitude: 40.7577,\n        longitude: -72.4376,\n        zoom: 11\n      },\n      showDirections: false\n    };\n\n    this.showDirections = () => {\n      this.setState(_objectSpread({}, this.state, {\n        showDirections: !this.state.showDirections\n      }));\n    };\n\n    this.getLeadLocation = () => {\n      this.setState({\n        viewport: _objectSpread({}, this.state.viewport, {\n          latitude: parseFloat(this.props.lead.latitude),\n          longitude: parseFloat(this.props.lead.longitude)\n        })\n      });\n    };\n\n    this.getPositions = () => {\n      const _fitBounds = new WebMercatorViewport(this.state.viewport).fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]], {\n        padding: 30,\n        offset: [0, -35]\n      }),\n            longitude = _fitBounds.longitude,\n            latitude = _fitBounds.latitude,\n            zoom = _fitBounds.zoom;\n\n      const viewport = _objectSpread({}, this.state.viewport, {\n        longitude,\n        latitude,\n        zoom,\n        transitionDuration: 2000,\n        transitionInterpolator: new FlyToInterpolator()\n      });\n\n      this.setState({\n        viewport\n      });\n    };\n\n    this.initializeMapForDirections = () => {\n      let userLon = parseFloat(this.props.user.longitude);\n      let userLat = parseFloat(this.props.user.latitude);\n      let clientLon = parseFloat(this.props.lead.longitude);\n      let clientLat = parseFloat(this.props.lead.latitude);\n      const map = this.reactMap.getMap(); //setting the box for the map\n      // const bounds = [[clientLon, clientLat], [userLon, userLat]] \n      // map.setMaxBounds(bounds)\n\n      const canvas = map.getCanvasContainer();\n      const start = [userLon, userLat];\n      const end = [clientLon, clientLat];\n      const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`;\n\n      const getRoute = (start, end) => {\n        fetch(directionsApi).then(res => res.json()).then(res => {\n          let data = res.routes[0]; // console.log(data)\n\n          let route = data.geometry.coordinates;\n          let geojson = {\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'LineString',\n              coordinates: route\n            }\n          };\n\n          if (map.getSource('route')) {\n            map.getSource('route').setData(geojson);\n          } else {\n            map.addLayer({\n              id: 'route',\n              type: 'line',\n              source: {\n                type: 'geojson',\n                data: {\n                  type: 'Feature',\n                  properties: {},\n                  geometry: {\n                    type: 'LineString',\n                    coordinates: geojson\n                  }\n                }\n              },\n              layout: {\n                'line-join': 'round',\n                'line-cap': 'round'\n              },\n              paint: {\n                'line-color': '#3887be',\n                'line-width': 5,\n                'line-opacity': 0.75\n              }\n            });\n          } //turn instructions here\n\n\n          const instructions = document.getElementById('instructions');\n          const steps = data.legs[0].steps;\n          const tripInstructions = [];\n\n          for (let i = 0; i < steps.length; i++) {}\n        });\n      };\n\n      map.on('load', function () {\n        console.log('i am in the on load'); //    getRoute(start, end)\n\n        console.log(start, end);\n        map.addLayer({\n          id: 'point',\n          type: 'circle',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'FeatureCollection',\n              features: [{\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'Point',\n                  coordinates: start\n                }\n              }]\n            }\n          },\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#3887be'\n          }\n        }); // took out code from where var end is defined in tutorial\n\n        if (map.getLayer('end')) {\n          map.getSource('end').setData(end);\n        } else {\n          map.addLayer({\n            id: 'end',\n            type: 'circle',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'FeatureCollection',\n                features: [{\n                  type: 'Feature',\n                  properties: {},\n                  geometry: {\n                    type: 'Point',\n                    coordinates: end\n                  }\n                }]\n              }\n            },\n            paint: {\n              'circle-radius': 10,\n              'circle-color': '#f30'\n            }\n          });\n        }\n      });\n      getRoute(start, end);\n    };\n  }\n\n  componentDidMount() {\n    this.getLeadLocation();\n    const map = this.reactMap.getMap();\n    this.initializeMapForDirections();\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(ReactMapGL, Object.assign({\n      mapboxApiAccessToken: TOKEN,\n      mapStyle: \"mapbox://styles/mapbox/navigation-guidance-day-v4\"\n    }, this.state.viewport, {\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      ref: reactMap => this.reactMap = reactMap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.getPositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Get Positions\"), React.createElement(\"button\", {\n      onClick: this.initializeMapForDirections,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Show Route\"), React.createElement(\"button\", {\n      onClick: this.showDirections,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Get Directions\"), React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      latitude: parseFloat(this.props.lead.latitude),\n      longitude: parseFloat(this.props.lead.longitude),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Client\"), React.createElement(Marker, {\n      latitude: parseFloat(this.props.user.latitude),\n      longitude: parseFloat(this.props.user.longitude),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"You\")), !this.state.showDirections ? null : React.createElement(\"div\", {\n      id: \"instructions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"hello\")));\n  }\n\n}\n\nexport default Map; // import mapboxgl from 'mapbox-gl'\n// import Directions from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions'\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n//from cdm\n// const map = this.reactMap.getMap()\n// const directions = new Directions({accessToken: mapboxgl.accessToken, profile:'mapbox/driving'})\n// map.addControl(directions, 'top-right')\n// map.addControl(\n//     new MapboxDirections({\n//     accessToken: mapboxgl.accessToken\n//     }),\n//     'top-left'\n//     )\n// https://api.mapbox.com/directions/v5/mapbox/driving/-74.043505%2C40.721642%3B%20-73.853657%2C40.746527.json?access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// `https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?geometries=geojson&access_token=${TOKEN}`\n// {\n//     \"routes\": [\n//       {\n//         \"weight_name\": \"routability\",\n//         \"legs\": [\n//           {\n//             \"summary\": \"I 278 East, I 495 East\",\n//             \"steps\": [],\n//             \"distance\": 21055.3,\n//             \"duration\": 2910,\n//             \"weight\": 2910\n//           }\n//         ],\n//         \"geometry\": \"{mpwFxr|bMl@sNgs@_Gb@{UbUeuClPqYnF{FzFdG_AsDuBcBZmG|@yAkEiDlYc}@}IuDfMkk@`Lgj@v`@}lBRmBgCa\\\\uVgUyu@ksAmIeb@kHwSid@k`@kAgLj@uFbSmcAlImMxF}KzBo\\\\dAqz@uNs`@iD}f@ql@aoCkAwMaBeQ{v@n[yC{N\",\n//         \"distance\": 21055.3,\n//         \"duration\": 2910,\n//         \"weight\": 2910\n//       }\n//     ],\n//     \"waypoints\": [\n//       {\n//         \"distance\": 11.116,\n//         \"name\": \"1st Street\",\n//         \"location\": [\n//           -74.043488,\n//           40.721741\n//         ]\n//       },\n//       {\n//         \"distance\": 20.217,\n//         \"name\": \"48th Avenue\",\n//         \"location\": [\n//           -73.853752,\n//           40.746696\n//         ]\n//       }\n//     ],\n//     \"code\": \"Ok\",\n//     \"uuid\": \"QAjcmRWR9dm8pAYPX42HeNodPun_IIhmxIJG5pjQU6abCnrIUXv7Aw==\"\n//   }\n//  componentDidMount() {\n//     //this.getLeadLocation() \n//     const map = this.reactMap.getMap()    \n//     this.initializeMapForDirections()\n//     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&geometries=geojson&access_token=${TOKEN}`)\n//     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA`)\n//     // .then(res => res.json()).then(res => {\n//     //     let data = res.routes[0]\n//     //     let route = data.geometry.coordinates\n//     //     console.log(route)\n//     // })   \n// }\n// let userLon =  parseFloat(this.props.user.longitude)\n//    let userLat = parseFloat(this.props.user.latitude)\n//    let clientLon = parseFloat(this.props.lead.longitude)\n//    let clientLat = parseFloat(this.props.lead.latitude)\n//    const map = this.reactMap.getMap()\n//    //setting the box for the map\n//    const bounds = [[userLon, userLat], [clientLon, clientLat]]\n//    map.setMaxBounds(bounds)\n//    //const canvas = map.getCanvasContainer()\n//    const start = [userLon, userLat]\n//    const end = [clientLon, clientLat]\n//    const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n//    fetch(directionsApi).then(res => res.json()).then(res => {\n//        let data = res.routes[0]\n//        let route = data.geometry.coordinates\n//        let geojson = {\n//            type: 'Feature',\n//            properties: {},\n//            geometry: {\n//                type: 'LineString',\n//                coordinates: route\n//            }\n//        }\n//        if (map.getSource('route').setData(geojson)){\n//             map.getSource('route').setData(geojson)\n//        } else {\n//            map.addLayer({\n//                id: 'route',\n//                type: 'line',\n//                source: {\n//                    type: 'geojson',\n//                    data: {\n//                        type: 'Feature',\n//                        properties: {},\n//                        geometry: {\n//                            type: 'LineString',\n//                            coordinates: geojson\n//                        }\n//                    }\n//                },\n//                layout: {\n//                    'line-join': 'round',\n//                    'line-cap': 'round'\n//                },\n//                paint: {\n//                    'line-color': '#3887be',\n//                    'line-width': 5,\n//                    'line-opacity': 0.75\n//                }\n//            })\n//        }\n//    })\n//    map.on('load', function() {\n//        //get route which i haven't defined it's just the fetch\n//        map.addLayer({\n//            id: 'point',\n//            type: 'circle',\n//            source: {\n//                type: 'geojson',\n//                data: {\n//                    type: 'FeatureCollection',\n//                    features: [{\n//                        type: 'Feature',\n//                        properties: {},\n//                        geometry: {\n//                            type:'Point',\n//                            coordinates: start\n//                        }\n//                    }]\n//                }\n//            },\n//            paint: {\n//                'circle-radius': 10,\n//                'circle-color': '#3887be'\n//            }\n//        })\n//        //next step code\n//    })\n//next step code\n//    const destination = {\n//        type: 'FeatureCollection',\n//        features: [{\n//            type: 'Feature',\n//            properties: {},\n//            geometry: {\n//                type:'Point',\n//                coordinates: end\n//            }\n//        }]\n//    },","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js"],"names":["React","Component","Fragment","ReactMapGL","Marker","FlyToInterpolator","WebMercatorViewport","TOKEN","process","env","REACT_APP_MAPBOX_TOKEN","Map","state","viewport","width","height","latitude","longitude","zoom","showDirections","setState","getLeadLocation","parseFloat","props","lead","getPositions","fitBounds","user","padding","offset","transitionDuration","transitionInterpolator","initializeMapForDirections","userLon","userLat","clientLon","clientLat","map","reactMap","getMap","canvas","getCanvasContainer","start","end","directionsApi","getRoute","fetch","then","res","json","data","routes","route","geometry","coordinates","geojson","type","properties","getSource","setData","addLayer","id","source","layout","paint","instructions","document","getElementById","steps","legs","tripInstructions","i","length","on","console","log","features","getLayer","componentDidMount","render"],"mappings":"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X,CAAgBV,SAAjB,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJL,CAXR,EAmBS,CAAC,KAAKL,KAAL,CAAWO,cAAZ,GAA6B,IAA7B,GAAmC;AAAK,MAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADkC,CAnB5C,CADR;AA0BH;;AA1NuB;;AA6N5B,eAAeR,GAAf,C,CAOA;AACA;AAEA;AAGA;AAEA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport ReactMapGL, {Marker,  FlyToInterpolator} from 'react-map-gl'\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport \"mapbox-gl/dist/mapbox-gl.css\"\n\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n\nclass Map extends Component {\n\n    state = { \n        viewport: {\n            width: 980,\n            height: 350,\n            latitude: 40.7577,\n            longitude: -72.4376,\n            zoom: 11\n        },\n        showDirections: false\n    }\n     \n    showDirections = () => {\n        this.setState(\n            { \n                ...this.state,\n                showDirections: !this.state.showDirections  \n            })\n    }\n\n    getLeadLocation = () => {\n        this.setState(\n            {   \n                viewport: {...this.state.viewport, latitude: parseFloat(this.props.lead.latitude), longitude: parseFloat(this.props.lead.longitude)}\n            })\n    }\n\n     getPositions = () => {\n        const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n        .fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]],{\n            padding: 30,\n            offset: [0, -35]\n          })\n        const viewport = {\n            ...this.state.viewport,\n            longitude,\n            latitude,\n            zoom,\n            transitionDuration: 2000,\n            transitionInterpolator: new FlyToInterpolator(),\n            \n        }\n        this.setState({viewport})\n     }\n\n    \n\n    componentDidMount() {\n        this.getLeadLocation()\n        const map = this.reactMap.getMap()\n        this.initializeMapForDirections()\n    }\n    \n\n    initializeMapForDirections = () => {\n        let userLon =  parseFloat(this.props.user.longitude)\n        let userLat = parseFloat(this.props.user.latitude)\n        let clientLon = parseFloat(this.props.lead.longitude)\n        let clientLat = parseFloat(this.props.lead.latitude)\n\n       const map = this.reactMap.getMap()\n       \n       //setting the box for the map\n        // const bounds = [[clientLon, clientLat], [userLon, userLat]] \n        // map.setMaxBounds(bounds)\n\n       const canvas = map.getCanvasContainer()\n       const start = [userLon, userLat]\n       const end = [clientLon, clientLat]\n       \n       const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n\n       const getRoute = (start, end) => {\n\n        fetch(directionsApi).then(res => res.json()).then(res => {\n            let data = res.routes[0]\n            // console.log(data)\n            let route = data.geometry.coordinates\n            let geojson = {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                    type: 'LineString',\n                    coordinates: route\n                }\n            }\n            \n            if (map.getSource('route')){\n                 map.getSource('route').setData(geojson)\n            } else {\n                map.addLayer({\n                    id: 'route',\n                    type: 'line',\n                    source: {\n                        type: 'geojson',\n                        data: {\n                            type: 'Feature',\n                            properties: {},\n                            geometry: {\n                                type: 'LineString',\n                                coordinates: geojson\n                            }\n                        }\n                    },\n                    layout: {\n                        'line-join': 'round',\n                        'line-cap': 'round'\n                    },\n                    paint: {\n                        'line-color': '#3887be',\n                        'line-width': 5,\n                        'line-opacity': 0.75\n                    }\n                })\n            }\n            //turn instructions here\n            const instructions = document.getElementById('instructions')\n            const steps = data.legs[0].steps\n            \n            const tripInstructions = []\n            for (let i = 0; i < steps.length; i++) {\n                \n            }\n        })\n\n       }\n       \n       \n       map.on('load', function() {\n           console.log('i am in the on load')\n           \n        //    getRoute(start, end)\n           console.log(start, end)\n           map.addLayer({\n               id: 'point',\n               type: 'circle',\n               source: {\n                   type: 'geojson',\n                   data: {\n                       type: 'FeatureCollection',\n                       features: [{\n                           type: 'Feature',\n                           properties: {},\n                           geometry: {\n                               type:'Point',\n                               coordinates: start\n                           }\n                       }]\n                   }\n               },\n               paint: {\n                   'circle-radius': 10,\n                   'circle-color': '#3887be'\n               }\n           })\n           // took out code from where var end is defined in tutorial\n           if (map.getLayer('end')) {\n               map.getSource('end').setData(end)\n           } else {\n               map.addLayer({\n                   id: 'end',\n                   type: 'circle',\n                   source: {\n                       type: 'geojson',\n                       data: {\n                           type: 'FeatureCollection',\n                           features: [{\n                               type: 'Feature',\n                               properties: {},\n                               geometry: {\n                                   type: 'Point',\n                                   coordinates: end\n                               }\n                           }]\n                       }\n                   },\n                   paint: {\n                       'circle-radius': 10,\n                       'circle-color': '#f30'\n                   }\n\n               })\n           }\n       })\n       getRoute(start, end)\n    }\n       \n    \n\n    render() { \n        console.log(this.state)\n        return ( \n                <ReactMapGL\n                    mapboxApiAccessToken={TOKEN}\n                    mapStyle='mapbox://styles/mapbox/navigation-guidance-day-v4'\n                    {...this.state.viewport}\n                    onViewportChange={(viewport) => this.setState({viewport})}\n                    ref={(reactMap) => this.reactMap = reactMap}\n                    \n                    >\n                        <button onClick={this.getPositions}>Get Positions</button>\n                        <button onClick={this.initializeMapForDirections}>Show Route</button>\n                        <button onClick={this.showDirections}>Get Directions</button>\n                        <Fragment>\n                            <Marker latitude={parseFloat(this.props.lead.latitude)} longitude={parseFloat(this.props.lead.longitude)}>\n                                Client\n                            </Marker>\n                             <Marker latitude={parseFloat(this.props.user.latitude)} longitude={parseFloat(this.props.user.longitude)}>\n                                You\n                            </Marker>\n                        </Fragment>    \n                        {!this.state.showDirections ? null: <div id=\"instructions\">\n                          <h1>hello</h1>  \n                        </div>}\n                </ReactMapGL>\n        \n         )\n    }\n}\n \nexport default Map;\n\n\n\n\n\n\n// import mapboxgl from 'mapbox-gl'\n// import Directions from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions'\n\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\n\n//from cdm\n\n// const map = this.reactMap.getMap()\n        // const directions = new Directions({accessToken: mapboxgl.accessToken, profile:'mapbox/driving'})\n        // map.addControl(directions, 'top-right')\n        // map.addControl(\n        //     new MapboxDirections({\n        //     accessToken: mapboxgl.accessToken\n        //     }),\n        //     'top-left'\n        //     )\n\n\n// https://api.mapbox.com/directions/v5/mapbox/driving/-74.043505%2C40.721642%3B%20-73.853657%2C40.746527.json?access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// `https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?geometries=geojson&access_token=${TOKEN}`\n\n\n\n\n// {\n//     \"routes\": [\n//       {\n//         \"weight_name\": \"routability\",\n//         \"legs\": [\n//           {\n//             \"summary\": \"I 278 East, I 495 East\",\n//             \"steps\": [],\n//             \"distance\": 21055.3,\n//             \"duration\": 2910,\n//             \"weight\": 2910\n//           }\n//         ],\n//         \"geometry\": \"{mpwFxr|bMl@sNgs@_Gb@{UbUeuClPqYnF{FzFdG_AsDuBcBZmG|@yAkEiDlYc}@}IuDfMkk@`Lgj@v`@}lBRmBgCa\\\\uVgUyu@ksAmIeb@kHwSid@k`@kAgLj@uFbSmcAlImMxF}KzBo\\\\dAqz@uNs`@iD}f@ql@aoCkAwMaBeQ{v@n[yC{N\",\n//         \"distance\": 21055.3,\n//         \"duration\": 2910,\n//         \"weight\": 2910\n//       }\n//     ],\n//     \"waypoints\": [\n//       {\n//         \"distance\": 11.116,\n//         \"name\": \"1st Street\",\n//         \"location\": [\n//           -74.043488,\n//           40.721741\n//         ]\n//       },\n//       {\n//         \"distance\": 20.217,\n//         \"name\": \"48th Avenue\",\n//         \"location\": [\n//           -73.853752,\n//           40.746696\n//         ]\n//       }\n//     ],\n//     \"code\": \"Ok\",\n//     \"uuid\": \"QAjcmRWR9dm8pAYPX42HeNodPun_IIhmxIJG5pjQU6abCnrIUXv7Aw==\"\n//   }\n\n\n//  componentDidMount() {\n    //     //this.getLeadLocation() \n    //     const map = this.reactMap.getMap()    \n    //     this.initializeMapForDirections()\n    //     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&geometries=geojson&access_token=${TOKEN}`)\n    //     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA`)\n    //     // .then(res => res.json()).then(res => {\n    //     //     let data = res.routes[0]\n    //     //     let route = data.geometry.coordinates\n    //     //     console.log(route)\n    //     // })   \n    // }\n\n\n\n    // let userLon =  parseFloat(this.props.user.longitude)\n    //    let userLat = parseFloat(this.props.user.latitude)\n    //    let clientLon = parseFloat(this.props.lead.longitude)\n    //    let clientLat = parseFloat(this.props.lead.latitude)\n\n    //    const map = this.reactMap.getMap()\n\n    //    //setting the box for the map\n    //    const bounds = [[userLon, userLat], [clientLon, clientLat]]\n    //    map.setMaxBounds(bounds)\n\n    //    //const canvas = map.getCanvasContainer()\n    //    const start = [userLon, userLat]\n    //    const end = [clientLon, clientLat]\n    //    const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n\n    //    fetch(directionsApi).then(res => res.json()).then(res => {\n    //        let data = res.routes[0]\n    //        let route = data.geometry.coordinates\n    //        let geojson = {\n    //            type: 'Feature',\n    //            properties: {},\n    //            geometry: {\n    //                type: 'LineString',\n    //                coordinates: route\n    //            }\n    //        }\n    //        if (map.getSource('route').setData(geojson)){\n    //             map.getSource('route').setData(geojson)\n    //        } else {\n    //            map.addLayer({\n    //                id: 'route',\n    //                type: 'line',\n    //                source: {\n    //                    type: 'geojson',\n    //                    data: {\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type: 'LineString',\n    //                            coordinates: geojson\n    //                        }\n    //                    }\n    //                },\n    //                layout: {\n    //                    'line-join': 'round',\n    //                    'line-cap': 'round'\n    //                },\n    //                paint: {\n    //                    'line-color': '#3887be',\n    //                    'line-width': 5,\n    //                    'line-opacity': 0.75\n    //                }\n    //            })\n    //        }\n\n    //    })\n       \n    //    map.on('load', function() {\n    //        //get route which i haven't defined it's just the fetch\n    //        map.addLayer({\n    //            id: 'point',\n    //            type: 'circle',\n    //            source: {\n    //                type: 'geojson',\n    //                data: {\n    //                    type: 'FeatureCollection',\n    //                    features: [{\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type:'Point',\n    //                            coordinates: start\n    //                        }\n    //                    }]\n    //                }\n    //            },\n    //            paint: {\n    //                'circle-radius': 10,\n    //                'circle-color': '#3887be'\n    //            }\n    //        })\n    //        //next step code\n    //    })\n\n\n\n    //next step code\n        //    const destination = {\n        //        type: 'FeatureCollection',\n        //        features: [{\n        //            type: 'Feature',\n        //            properties: {},\n        //            geometry: {\n        //                type:'Point',\n        //                coordinates: end\n        //            }\n        //        }]\n        //    },"]},"metadata":{},"sourceType":"module"}