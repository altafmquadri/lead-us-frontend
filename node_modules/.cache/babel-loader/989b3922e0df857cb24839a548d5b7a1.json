{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/MetricsContainer.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport WeeklyAppointmentsMetric from './WeeklyAppointmentsMetric';\nimport WeeklyProduction from './WeeklyProduction';\n\nclass MetricsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: [],\n      appointments: [],\n      appointmentDates: [],\n      filteredAppointmentDatesByWeek: [],\n      daysOfWeek: [],\n      countOfApptInDaysOfWeek: [],\n      lineChartData: {}\n    };\n\n    this.getDaysOfTheWeek = () => {\n      let beginningOfWeek = moment().startOf('week');\n      let daysOfWeek = []; //used knowledge of today's date and the start of the week to iterate days to the end of the week\n\n      daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'));\n\n      for (let i = 1; i < 7; i++) {\n        daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'));\n      }\n\n      return daysOfWeek;\n    };\n\n    this.countOfApptInDaysOfWeek = (a, b) => {\n      let counts = [];\n\n      for (let i = 0; i < a.length; i++) {\n        let count = 0;\n\n        for (let j = 0; j < b.length; j++) {\n          if (moment(b[j]).isSame(moment(a[i]))) {\n            count++;\n          }\n        }\n\n        counts.push(count);\n      }\n\n      return counts;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      currentUser: this.props.currentUser,\n      appointments: this.props.appointments\n    });\n    let newDates, filteredAppointmentDatesByWeek; //take all appointments\n\n    newDates = this.props.appointments.map(appointment => appointment.date); //take appointments and filter them by current week\n    //compare today's date with the array of appointments\n\n    filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'));\n    this.setState({\n      appointmentDates: [...this.state.appointmentDates, ...newDates],\n      filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n      daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()]\n    }, () => this.setState({\n      countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]\n    }, () => this.setState({\n      lineChartData: _objectSpread({}, this.setLineChartData())\n    })));\n  }\n\n  render() {\n    // console.log(this.state.currentUser)\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"metrics-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Metrics\"), React.createElement(WeeklyAppointmentsMetric, {\n      currentUser: this.state.currentUser,\n      appointments: this.props.appointments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(WeeklyProduction, {\n      currentUser: this.state.currentUser,\n      appointments: this.state.appointments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MetricsContainer;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/MetricsContainer.js"],"names":["React","moment","WeeklyAppointmentsMetric","WeeklyProduction","MetricsContainer","Component","state","currentUser","appointments","appointmentDates","filteredAppointmentDatesByWeek","daysOfWeek","countOfApptInDaysOfWeek","lineChartData","getDaysOfTheWeek","beginningOfWeek","startOf","push","format","i","add","a","b","counts","length","count","j","isSame","componentDidMount","setState","props","newDates","map","appointment","date","filter","currentDate","setLineChartData","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment'\nimport WeeklyAppointmentsMetric from './WeeklyAppointmentsMetric';\nimport WeeklyProduction from './WeeklyProduction';\n\nclass MetricsContainer extends React.Component {\n    state = { \n        currentUser: [],\n        appointments: [],\n        appointmentDates: [],\n        filteredAppointmentDatesByWeek: [],\n        daysOfWeek: [],\n        countOfApptInDaysOfWeek: [],\n        lineChartData: {}\n     }\n\n    componentDidMount() {\n        this.setState(\n            { \n                currentUser: this.props.currentUser,\n                appointments: this.props.appointments,\n            })\n            let newDates, filteredAppointmentDatesByWeek\n            //take all appointments\n            newDates = this.props.appointments.map(appointment => appointment.date)\n            //take appointments and filter them by current week\n            //compare today's date with the array of appointments\n            filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'))\n            this.setState(\n                { \n                    appointmentDates: [...this.state.appointmentDates, ...newDates],\n                    filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n                    daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()],\n                }, () => this.setState(\n                    {\n                        countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]  \n                    }, () => this.setState({ lineChartData: {...this.setLineChartData()}  })))\n    }\n\n    getDaysOfTheWeek = () => {\n        let beginningOfWeek = moment().startOf('week')\n        let daysOfWeek = []\n        //used knowledge of today's date and the start of the week to iterate days to the end of the week\n        daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n        for (let i = 1; i < 7; i++) {\n            daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n        }\n        return daysOfWeek\n    }\n\n    // console.log(moment().isSame(moment('2019-12-23'),'date'))\n    countOfApptInDaysOfWeek = (a, b) => {\n        let counts = []\n        for (let i = 0; i < a.length; i++) {\n            let count = 0;\n            for (let j = 0; j < b.length; j++) {\n                if (moment(b[j]).isSame(moment(a[i]))) {\n                    count++\n                }\n            }\n            counts.push(count)\n        }\n        return counts\n    }\n\n\n\n\n\n\n\n\n\n    render() { \n        // console.log(this.state.currentUser)\n        return ( \n            <div>\n\n            \n            <div className=\"metrics-page\">\n                <h1>Metrics</h1>\n            \n                <WeeklyAppointmentsMetric currentUser={this.state.currentUser}\n                    appointments={this.props.appointments}/>\n            </div>\n                <WeeklyProduction currentUser={this.state.currentUser}\n                appointments={this.state.appointments}/>\n            </div>\n        );\n    }\n}\n \nexport default MetricsContainer;"]},"metadata":{},"sourceType":"module"}