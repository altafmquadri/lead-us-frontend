{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js\";\nimport React, { Component, Fragment } from 'react';\nimport ReactMapGL, { Marker, FlyToInterpolator } from 'react-map-gl';\nimport WebMercatorViewport from 'viewport-mercator-project';\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {\n        width: 950,\n        height: 250,\n        latitude: 40.7577,\n        longitude: -72.4376,\n        zoom: 12\n      }\n    };\n\n    this.getLeadLocation = () => {\n      this.setState({\n        viewport: _objectSpread({}, this.state.viewport, {\n          latitude: parseFloat(this.props.lead.latitude),\n          longitude: parseFloat(this.props.lead.longitude)\n        })\n      });\n    };\n\n    this.getPositions = () => {\n      const _fitBounds = new WebMercatorViewport(this.state.viewport).fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]], {\n        padding: 30,\n        offset: [0, -20]\n      }),\n            longitude = _fitBounds.longitude,\n            latitude = _fitBounds.latitude,\n            zoom = _fitBounds.zoom;\n\n      const viewport = _objectSpread({}, this.state.viewport, {\n        longitude,\n        latitude,\n        zoom,\n        transitionDuration: 2000,\n        transitionInterpolator: new FlyToInterpolator()\n      });\n\n      this.setState({\n        viewport\n      });\n    };\n  }\n\n  //  componentDidMount() {\n  //     //this.getLeadLocation() \n  //     const map = this.reactMap.getMap()    \n  //     this.initializeMapForDirections()\n  //     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&geometries=geojson&access_token=${TOKEN}`)\n  //     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA`)\n  //     // .then(res => res.json()).then(res => {\n  //     //     let data = res.routes[0]\n  //     //     let route = data.geometry.coordinates\n  //     //     console.log(route)\n  //     // })   \n  // }\n  componentDidMount() {\n    this.getLeadLocation();\n    let userLon = parseFloat(this.props.user.longitude);\n    let userLat = parseFloat(this.props.user.latitude);\n    let clientLon = parseFloat(this.props.lead.longitude);\n    let clientLat = parseFloat(this.props.lead.latitude);\n    const map = this.reactMap.getMap(); //setting the box for the map\n\n    const bounds = [[clientLon, clientLat], [userLon, userLat]];\n    map.setMaxBounds(bounds); //const canvas = map.getCanvasContainer()\n\n    const start = [userLon, userLat];\n    const end = [clientLon, clientLat];\n    console.log(start, end);\n    const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`; //    fetch(directionsApi).then(res => res.json()).then(res => {\n    //        let data = res.routes[0]\n    //        console.log(data)\n    //        let route = data.geometry.coordinates\n    //        let geojson = {\n    //            type: 'Feature',\n    //            properties: {},\n    //            geometry: {\n    //                type: 'LineString',\n    //                coordinates: route\n    //            }\n    //        }\n    //        if (map.getSource('route').setData(geojson)){\n    //             map.getSource('route').setData(geojson)\n    //        } else {\n    //            map.addLayer({\n    //                id: 'route',\n    //                type: 'line',\n    //                source: {\n    //                    type: 'geojson',\n    //                    data: {\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type: 'LineString',\n    //                            coordinates: geojson\n    //                        }\n    //                    }\n    //                },\n    //                layout: {\n    //                    'line-join': 'round',\n    //                    'line-cap': 'round'\n    //                },\n    //                paint: {\n    //                    'line-color': '#3887be',\n    //                    'line-width': 5,\n    //                    'line-opacity': 0.75\n    //                }\n    //            })\n    //        }\n    //    })\n    //    map.on('load', function() {\n    //        //get route which i haven't defined it's just the fetch\n    //        map.addLayer({\n    //            id: 'point',\n    //            type: 'circle',\n    //            source: {\n    //                type: 'geojson',\n    //                data: {\n    //                    type: 'FeatureCollection',\n    //                    features: [{\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type:'Point',\n    //                            coordinates: start\n    //                        }\n    //                    }]\n    //                }\n    //            },\n    //            paint: {\n    //                'circle-radius': 10,\n    //                'circle-color': '#3887be'\n    //            }\n    //        })\n    //        //next step code\n    //    })\n  } // initializeMapForDirections = () => {\n  //    let userLon =  parseFloat(this.props.user.longitude)\n  //    let userLat = parseFloat(this.props.user.latitude)\n  //    let clientLon = parseFloat(this.props.lead.longitude)\n  //    let clientLat = parseFloat(this.props.lead.latitude)\n  //    const map = this.reactMap.getMap()\n  //    //setting the box for the map\n  //    const bounds = [[userLon, userLat], [clientLon, clientLat]]\n  //    map.setMaxBounds(bounds)\n  //    //const canvas = map.getCanvasContainer()\n  //    const start = [userLon, userLat]\n  //    const end = [clientLon, clientLat]\n  //    const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n  //    fetch(directionsApi).then(res => res.json()).then(res => {\n  //        let data = res.routes[0]\n  //        let route = data.geometry.coordinates\n  //        let geojson = {\n  //            type: 'Feature',\n  //            properties: {},\n  //            geometry: {\n  //                type: 'LineString',\n  //                coordinates: route\n  //            }\n  //        }\n  //        if (map.getSource('route').setData(geojson)){\n  //             map.getSource('route').setData(geojson)\n  //        } else {\n  //            map.addLayer({\n  //                id: 'route',\n  //                type: 'line',\n  //                source: {\n  //                    type: 'geojson',\n  //                    data: {\n  //                        type: 'Feature',\n  //                        properties: {},\n  //                        geometry: {\n  //                            type: 'LineString',\n  //                            coordinates: geojson\n  //                        }\n  //                    }\n  //                },\n  //                layout: {\n  //                    'line-join': 'round',\n  //                    'line-cap': 'round'\n  //                },\n  //                paint: {\n  //                    'line-color': '#3887be',\n  //                    'line-width': 5,\n  //                    'line-opacity': 0.75\n  //                }\n  //            })\n  //        }\n  //    })\n  //    map.on('load', function() {\n  //        //get route which i haven't defined it's just the fetch\n  //        map.addLayer({\n  //            id: 'point',\n  //            type: 'circle',\n  //            source: {\n  //                type: 'geojson',\n  //                data: {\n  //                    type: 'FeatureCollection',\n  //                    features: [{\n  //                        type: 'Feature',\n  //                        properties: {},\n  //                        geometry: {\n  //                            type:'Point',\n  //                            coordinates: start\n  //                        }\n  //                    }]\n  //                }\n  //            },\n  //            paint: {\n  //                'circle-radius': 10,\n  //                'circle-color': '#3887be'\n  //            }\n  //        })\n  //        //next step code\n  //    })\n  // }\n\n\n  render() {\n    return React.createElement(ReactMapGL, Object.assign({\n      mapboxApiAccessToken: TOKEN,\n      mapStyle: \"mapbox://styles/mapbox/navigation-guidance-day-v4\"\n    }, this.state.viewport, {\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      ref: reactMap => this.reactMap = reactMap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.getPositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Get Positions\"), React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      latitude: parseFloat(this.props.lead.latitude),\n      longitude: parseFloat(this.props.lead.longitude),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Client\"), React.createElement(Marker, {\n      latitude: parseFloat(this.props.user.latitude),\n      longitude: parseFloat(this.props.user.longitude),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"You\")));\n  }\n\n}\n\nexport default Map; // import mapboxgl from 'mapbox-gl'\n// import Directions from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions'\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n//from cdm\n// const map = this.reactMap.getMap()\n// const directions = new Directions({accessToken: mapboxgl.accessToken, profile:'mapbox/driving'})\n// map.addControl(directions, 'top-right')\n// map.addControl(\n//     new MapboxDirections({\n//     accessToken: mapboxgl.accessToken\n//     }),\n//     'top-left'\n//     )\n// https://api.mapbox.com/directions/v5/mapbox/driving/-74.043505%2C40.721642%3B%20-73.853657%2C40.746527.json?access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// `https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?geometries=geojson&access_token=${TOKEN}`\n// {\n//     \"routes\": [\n//       {\n//         \"weight_name\": \"routability\",\n//         \"legs\": [\n//           {\n//             \"summary\": \"I 278 East, I 495 East\",\n//             \"steps\": [],\n//             \"distance\": 21055.3,\n//             \"duration\": 2910,\n//             \"weight\": 2910\n//           }\n//         ],\n//         \"geometry\": \"{mpwFxr|bMl@sNgs@_Gb@{UbUeuClPqYnF{FzFdG_AsDuBcBZmG|@yAkEiDlYc}@}IuDfMkk@`Lgj@v`@}lBRmBgCa\\\\uVgUyu@ksAmIeb@kHwSid@k`@kAgLj@uFbSmcAlImMxF}KzBo\\\\dAqz@uNs`@iD}f@ql@aoCkAwMaBeQ{v@n[yC{N\",\n//         \"distance\": 21055.3,\n//         \"duration\": 2910,\n//         \"weight\": 2910\n//       }\n//     ],\n//     \"waypoints\": [\n//       {\n//         \"distance\": 11.116,\n//         \"name\": \"1st Street\",\n//         \"location\": [\n//           -74.043488,\n//           40.721741\n//         ]\n//       },\n//       {\n//         \"distance\": 20.217,\n//         \"name\": \"48th Avenue\",\n//         \"location\": [\n//           -73.853752,\n//           40.746696\n//         ]\n//       }\n//     ],\n//     \"code\": \"Ok\",\n//     \"uuid\": \"QAjcmRWR9dm8pAYPX42HeNodPun_IIhmxIJG5pjQU6abCnrIUXv7Aw==\"\n//   }","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js"],"names":["React","Component","Fragment","ReactMapGL","Marker","FlyToInterpolator","WebMercatorViewport","TOKEN","process","env","REACT_APP_MAPBOX_TOKEN","Map","state","viewport","width","height","latitude","longitude","zoom","getLeadLocation","setState","parseFloat","props","lead","getPositions","fitBounds","user","padding","offset","transitionDuration","transitionInterpolator","componentDidMount","userLon","userLat","clientLon","clientLat","map","reactMap","getMap","bounds","setMaxBounds","start","end","console","log","directionsApi","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,IAAoBC,MAApB,EAA6BC,iBAA7B,QAAqD,cAArD;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA1B;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBW,KAFwB,GAEhB;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE,GADD;AAENC,QAAAA,MAAM,EAAE,GAFF;AAGNC,QAAAA,QAAQ,EAAE,OAHJ;AAINC,QAAAA,SAAS,EAAE,CAAC,OAJN;AAKNC,QAAAA,IAAI,EAAE;AALA;AADN,KAFgB;;AAAA,SAcxBC,eAdwB,GAcN,MAAM;AACpB,WAAKC,QAAL,CACI;AACIP,QAAAA,QAAQ,oBAAM,KAAKD,KAAL,CAAWC,QAAjB;AAA2BG,UAAAA,QAAQ,EAAEK,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBP,QAAjB,CAA/C;AAA2EC,UAAAA,SAAS,EAAEI,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBN,SAAjB;AAAhG;AADZ,OADJ;AAIH,KAnBuB;;AAAA,SAqBvBO,YArBuB,GAqBR,MAAM;AAAA,yBACkB,IAAIlB,mBAAJ,CAAwB,KAAKM,KAAL,CAAWC,QAAnC,EACnCY,SADmC,CACzB,CAAC,CAACJ,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBN,SAAjB,CAAX,EAAwCI,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBP,QAAjB,CAAlD,CAAD,EAAgF,CAACK,UAAU,CAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBT,SAAjB,CAAX,EAAwCI,UAAU,CAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBV,QAAjB,CAAlD,CAAhF,CADyB,EACsI;AACtKW,QAAAA,OAAO,EAAE,EAD6J;AAEtKC,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAC,EAAL;AAF8J,OADtI,CADlB;AAAA,YACXX,SADW,cACXA,SADW;AAAA,YACAD,QADA,cACAA,QADA;AAAA,YACUE,IADV,cACUA,IADV;;AAMlB,YAAML,QAAQ,qBACP,KAAKD,KAAL,CAAWC,QADJ;AAEVI,QAAAA,SAFU;AAGVD,QAAAA,QAHU;AAIVE,QAAAA,IAJU;AAKVW,QAAAA,kBAAkB,EAAE,IALV;AAMVC,QAAAA,sBAAsB,EAAE,IAAIzB,iBAAJ;AANd,QAAd;;AASA,WAAKe,QAAL,CAAc;AAACP,QAAAA;AAAD,OAAd;AACF,KArCsB;AAAA;;AAuCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAkB,EAAAA,iBAAiB,GAAG;AAEhB,SAAKZ,eAAL;AACA,QAAIa,OAAO,GAAIX,UAAU,CAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBT,SAAjB,CAAzB;AACA,QAAIgB,OAAO,GAAGZ,UAAU,CAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBV,QAAjB,CAAxB;AACA,QAAIkB,SAAS,GAAGb,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBN,SAAjB,CAA1B;AACA,QAAIkB,SAAS,GAAGd,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBP,QAAjB,CAA1B;AAED,UAAMoB,GAAG,GAAG,KAAKC,QAAL,CAAcC,MAAd,EAAZ,CARiB,CAUjB;;AACC,UAAMC,MAAM,GAAG,CAAC,CAACL,SAAD,EAAYC,SAAZ,CAAD,EAAyB,CAACH,OAAD,EAAUC,OAAV,CAAzB,CAAf;AACAG,IAAAA,GAAG,CAACI,YAAJ,CAAiBD,MAAjB,EAZgB,CAcjB;;AACA,UAAME,KAAK,GAAG,CAACT,OAAD,EAAUC,OAAV,CAAd;AACA,UAAMS,GAAG,GAAG,CAACR,SAAD,EAAYC,SAAZ,CAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,GAAnB;AACA,UAAMG,aAAa,GAAI,uDAAsDJ,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,IAAGC,GAAG,CAAC,CAAD,CAAI,IAAGA,GAAG,CAAC,CAAD,CAAI,+CAA8CnC,KAAM,EAA1K,CAlBiB,CAoBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,GA7IuB,CAgJxB;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAuC,EAAAA,MAAM,GAAG;AAEL,WACQ,oBAAC,UAAD;AACI,MAAA,oBAAoB,EAAEvC,KAD1B;AAEI,MAAA,QAAQ,EAAC;AAFb,OAGQ,KAAKK,KAAL,CAAWC,QAHnB;AAII,MAAA,gBAAgB,EAAGA,QAAD,IAAc,KAAKO,QAAL,CAAc;AAACP,QAAAA;AAAD,OAAd,CAJpC;AAKI,MAAA,GAAG,EAAGwB,QAAD,IAAc,KAAKA,QAAL,GAAgBA,QALvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQQ;AAAQ,MAAA,OAAO,EAAE,KAAKb,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARR,EASQ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEH,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBP,QAAjB,CAA5B;AAAwD,MAAA,SAAS,EAAEK,UAAU,CAAC,KAAKC,KAAL,CAAWC,IAAX,CAAgBN,SAAjB,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEI,UAAU,CAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBV,QAAjB,CAA5B;AAAwD,MAAA,SAAS,EAAEK,UAAU,CAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBT,SAAjB,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJL,CATR,CADR;AAsBH;;AAhQuB;;AAmQ5B,eAAeN,GAAf,C,CAOA;AACA;AAEA;AAGA;AAEA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport ReactMapGL, {Marker,  FlyToInterpolator} from 'react-map-gl'\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n\nclass Map extends Component {\n\n    state = { \n        viewport: {\n            width: 950,\n            height: 250,\n            latitude: 40.7577,\n            longitude: -72.4376,\n            zoom: 12\n        }\n    }\n     \n    \n\n    getLeadLocation = () => {\n        this.setState(\n            {   \n                viewport: {...this.state.viewport, latitude: parseFloat(this.props.lead.latitude), longitude: parseFloat(this.props.lead.longitude)}\n            })\n    }\n\n     getPositions = () => {\n        const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n        .fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]],{\n            padding: 30,\n            offset: [0, -20]\n          })\n        const viewport = {\n            ...this.state.viewport,\n            longitude,\n            latitude,\n            zoom,\n            transitionDuration: 2000,\n            transitionInterpolator: new FlyToInterpolator(),\n            \n        }\n        this.setState({viewport})\n     }\n\n    //  componentDidMount() {\n    //     //this.getLeadLocation() \n    //     const map = this.reactMap.getMap()    \n    //     this.initializeMapForDirections()\n    //     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&geometries=geojson&access_token=${TOKEN}`)\n    //     // fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA`)\n    //     // .then(res => res.json()).then(res => {\n    //     //     let data = res.routes[0]\n    //     //     let route = data.geometry.coordinates\n    //     //     console.log(route)\n    //     // })   \n    // }\n\n    componentDidMount() {\n\n        this.getLeadLocation()\n        let userLon =  parseFloat(this.props.user.longitude)\n        let userLat = parseFloat(this.props.user.latitude)\n        let clientLon = parseFloat(this.props.lead.longitude)\n        let clientLat = parseFloat(this.props.lead.latitude)\n\n       const map = this.reactMap.getMap()\n       \n       //setting the box for the map\n        const bounds = [[clientLon, clientLat], [userLon, userLat]] \n        map.setMaxBounds(bounds)\n\n       //const canvas = map.getCanvasContainer()\n       const start = [userLon, userLat]\n       const end = [clientLon, clientLat]\n       console.log(start, end)\n       const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n\n    //    fetch(directionsApi).then(res => res.json()).then(res => {\n    //        let data = res.routes[0]\n    //        console.log(data)\n    //        let route = data.geometry.coordinates\n    //        let geojson = {\n    //            type: 'Feature',\n    //            properties: {},\n    //            geometry: {\n    //                type: 'LineString',\n    //                coordinates: route\n    //            }\n    //        }\n    //        if (map.getSource('route').setData(geojson)){\n    //             map.getSource('route').setData(geojson)\n    //        } else {\n    //            map.addLayer({\n    //                id: 'route',\n    //                type: 'line',\n    //                source: {\n    //                    type: 'geojson',\n    //                    data: {\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type: 'LineString',\n    //                            coordinates: geojson\n    //                        }\n    //                    }\n    //                },\n    //                layout: {\n    //                    'line-join': 'round',\n    //                    'line-cap': 'round'\n    //                },\n    //                paint: {\n    //                    'line-color': '#3887be',\n    //                    'line-width': 5,\n    //                    'line-opacity': 0.75\n    //                }\n    //            })\n    //        }\n\n    //    })\n       \n    //    map.on('load', function() {\n    //        //get route which i haven't defined it's just the fetch\n    //        map.addLayer({\n    //            id: 'point',\n    //            type: 'circle',\n    //            source: {\n    //                type: 'geojson',\n    //                data: {\n    //                    type: 'FeatureCollection',\n    //                    features: [{\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type:'Point',\n    //                            coordinates: start\n    //                        }\n    //                    }]\n    //                }\n    //            },\n    //            paint: {\n    //                'circle-radius': 10,\n    //                'circle-color': '#3887be'\n    //            }\n    //        })\n    //        //next step code\n    //    })\n    }\n    \n\n    // initializeMapForDirections = () => {\n        \n    //    let userLon =  parseFloat(this.props.user.longitude)\n    //    let userLat = parseFloat(this.props.user.latitude)\n    //    let clientLon = parseFloat(this.props.lead.longitude)\n    //    let clientLat = parseFloat(this.props.lead.latitude)\n\n    //    const map = this.reactMap.getMap()\n\n    //    //setting the box for the map\n    //    const bounds = [[userLon, userLat], [clientLon, clientLat]]\n    //    map.setMaxBounds(bounds)\n\n    //    //const canvas = map.getCanvasContainer()\n    //    const start = [userLon, userLat]\n    //    const end = [clientLon, clientLat]\n    //    const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n\n    //    fetch(directionsApi).then(res => res.json()).then(res => {\n    //        let data = res.routes[0]\n    //        let route = data.geometry.coordinates\n    //        let geojson = {\n    //            type: 'Feature',\n    //            properties: {},\n    //            geometry: {\n    //                type: 'LineString',\n    //                coordinates: route\n    //            }\n    //        }\n    //        if (map.getSource('route').setData(geojson)){\n    //             map.getSource('route').setData(geojson)\n    //        } else {\n    //            map.addLayer({\n    //                id: 'route',\n    //                type: 'line',\n    //                source: {\n    //                    type: 'geojson',\n    //                    data: {\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type: 'LineString',\n    //                            coordinates: geojson\n    //                        }\n    //                    }\n    //                },\n    //                layout: {\n    //                    'line-join': 'round',\n    //                    'line-cap': 'round'\n    //                },\n    //                paint: {\n    //                    'line-color': '#3887be',\n    //                    'line-width': 5,\n    //                    'line-opacity': 0.75\n    //                }\n    //            })\n    //        }\n\n    //    })\n       \n    //    map.on('load', function() {\n    //        //get route which i haven't defined it's just the fetch\n    //        map.addLayer({\n    //            id: 'point',\n    //            type: 'circle',\n    //            source: {\n    //                type: 'geojson',\n    //                data: {\n    //                    type: 'FeatureCollection',\n    //                    features: [{\n    //                        type: 'Feature',\n    //                        properties: {},\n    //                        geometry: {\n    //                            type:'Point',\n    //                            coordinates: start\n    //                        }\n    //                    }]\n    //                }\n    //            },\n    //            paint: {\n    //                'circle-radius': 10,\n    //                'circle-color': '#3887be'\n    //            }\n    //        })\n    //        //next step code\n    //    })\n    // }\n\n    render() { \n        \n        return ( \n                <ReactMapGL\n                    mapboxApiAccessToken={TOKEN}\n                    mapStyle='mapbox://styles/mapbox/navigation-guidance-day-v4'\n                    {...this.state.viewport}\n                    onViewportChange={(viewport) => this.setState({viewport})}\n                    ref={(reactMap) => this.reactMap = reactMap}\n                    \n                    >\n                        <button onClick={this.getPositions}>Get Positions</button>\n                        <Fragment>\n                            <Marker latitude={parseFloat(this.props.lead.latitude)} longitude={parseFloat(this.props.lead.longitude)}>\n                                Client\n                            </Marker>\n                             <Marker latitude={parseFloat(this.props.user.latitude)} longitude={parseFloat(this.props.user.longitude)}>\n                                You\n                            </Marker>\n                        </Fragment>    \n\n                </ReactMapGL>\n        \n         )\n    }\n}\n \nexport default Map;\n\n\n\n\n\n\n// import mapboxgl from 'mapbox-gl'\n// import Directions from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions'\n\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\n\n//from cdm\n\n// const map = this.reactMap.getMap()\n        // const directions = new Directions({accessToken: mapboxgl.accessToken, profile:'mapbox/driving'})\n        // map.addControl(directions, 'top-right')\n        // map.addControl(\n        //     new MapboxDirections({\n        //     accessToken: mapboxgl.accessToken\n        //     }),\n        //     'top-left'\n        //     )\n\n\n// https://api.mapbox.com/directions/v5/mapbox/driving/-74.043505%2C40.721642%3B%20-73.853657%2C40.746527.json?access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?&steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYWx0YWZtcXVhZHJpIiwiYSI6ImNrM2ppM2N3YjBqODczZHJtMHdndm84bmEifQ.cSDhDuaxlGYl34rlk2G_GA\n// `https://api.mapbox.com/directions/v5/mapbox/driving/-73.853657,40.746527;-74.043505,40.721642?geometries=geojson&access_token=${TOKEN}`\n\n\n\n\n// {\n//     \"routes\": [\n//       {\n//         \"weight_name\": \"routability\",\n//         \"legs\": [\n//           {\n//             \"summary\": \"I 278 East, I 495 East\",\n//             \"steps\": [],\n//             \"distance\": 21055.3,\n//             \"duration\": 2910,\n//             \"weight\": 2910\n//           }\n//         ],\n//         \"geometry\": \"{mpwFxr|bMl@sNgs@_Gb@{UbUeuClPqYnF{FzFdG_AsDuBcBZmG|@yAkEiDlYc}@}IuDfMkk@`Lgj@v`@}lBRmBgCa\\\\uVgUyu@ksAmIeb@kHwSid@k`@kAgLj@uFbSmcAlImMxF}KzBo\\\\dAqz@uNs`@iD}f@ql@aoCkAwMaBeQ{v@n[yC{N\",\n//         \"distance\": 21055.3,\n//         \"duration\": 2910,\n//         \"weight\": 2910\n//       }\n//     ],\n//     \"waypoints\": [\n//       {\n//         \"distance\": 11.116,\n//         \"name\": \"1st Street\",\n//         \"location\": [\n//           -74.043488,\n//           40.721741\n//         ]\n//       },\n//       {\n//         \"distance\": 20.217,\n//         \"name\": \"48th Avenue\",\n//         \"location\": [\n//           -73.853752,\n//           40.746696\n//         ]\n//       }\n//     ],\n//     \"code\": \"Ok\",\n//     \"uuid\": \"QAjcmRWR9dm8pAYPX42HeNodPun_IIhmxIJG5pjQU6abCnrIUXv7Aw==\"\n//   }"]},"metadata":{},"sourceType":"module"}