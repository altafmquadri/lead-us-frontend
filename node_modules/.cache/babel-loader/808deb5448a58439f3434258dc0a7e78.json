{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/App.js\";\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport MainContainer from './containers/MainContainer';\nimport NewLeadContainer from './containers/NewLeadContainer';\nimport LeadActivityContainer from './containers/LeadActivityContainer';\nimport SignupForm from './components/SignupForm';\nimport LoginForm from './components/LoginForm';\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nconst api = 'http://localhost:3000/api/v1/auto_login';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: null,\n      leads: [],\n      appointments: [],\n      calls: [],\n      clickedLead: [],\n      clickedLeadCalls: [],\n      clickedLeadAppointments: [],\n      loading: true\n    };\n\n    this.setCurrentUser = user => {\n      this.setState({\n        currentUser: user,\n        leads: user.leads,\n        calls: user.calls,\n        appointments: user.appointments\n      }, () => {\n        localStorage.user_id = user.id;\n        this.props.history.push('/');\n      });\n    };\n\n    this.logoutUser = () => {\n      this.setState({\n        currentUser: null\n      }, () => {\n        localStorage.removeItem('user_id');\n        localStorage.clear();\n        this.props.history.push('/login');\n      });\n    };\n\n    this.getMyLocation = () => {\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      };\n\n      const success = position => {\n        const coordinateObj = position.coords;\n        this.setState({\n          latitude: coordinateObj.latitude,\n          longitude: coordinateObj.longitude\n        });\n      };\n\n      const error = err => {\n        console.warn(`ERROR'(${err.code})): ${err.message}`);\n      };\n\n      navigator.geolocation.getCurrentPosition(success, error, options);\n    };\n\n    this.findLeadName = id => {\n      let name;\n      let lead = this.state.leads.find(lead => lead.id === id);\n      name = `${lead.first_name} ${lead.last_name}`;\n      return name;\n    };\n\n    this.onLeadClick = leadData => {\n      //  console.log(\"i am the clicked lead\", leadData.lead)\n      this.setState({\n        clickedLead: leadData.lead,\n        clickedLeadCalls: this.state.calls.filter(calls => calls.lead_id === leadData.lead.id),\n        clickedLeadAppointments: this.state.appointments.filter(appointments => appointments.lead_id === leadData.lead.id)\n      }, () => {\n        this.props.history.push(`/leads/${leadData.lead.id}`);\n      });\n    };\n\n    this.addNewLead = newLead => {\n      this.setState(_objectSpread({}, this.state, {\n        leads: [...this.state.leads, newLead]\n      }));\n    };\n\n    this.addNewCall = newCall => {\n      this.setState(_objectSpread({}, this.state, {\n        calls: [...this.state.calls, newCall],\n        clickedLeadCalls: [...this.state.clickedLeadCalls, newCall]\n      }));\n    };\n\n    this.addNewAppointment = newAppointment => {\n      this.setState(_objectSpread({}, this.state, {\n        appointments: [...this.state.appointments, newAppointment],\n        clickedLeadAppointments: [...this.state.clickedLeadAppointments, newAppointment]\n      }));\n    };\n\n    this.editCallNoApp = call => {\n      this.setState(_objectSpread({}, this.state, {\n        calls: [...this.state.calls.map(stateCall => {\n          if (stateCall.id === call.id) {\n            return call;\n          } else {\n            return stateCall;\n          }\n        })],\n        clickedLeadCalls: [...this.state.clickedLeadCalls.map(stateCall => {\n          if (stateCall.id === call.id) {\n            return call;\n          } else {\n            return stateCall;\n          }\n        })]\n      }));\n    };\n  }\n\n  //End of Functions written to add lead activity ***********************************************************************************\n  componentDidMount() {\n    //setup for auto_login\n    const user_id = localStorage.user_id;\n\n    if (user_id) {\n      fetch(api, {\n        headers: {\n          \"Authorization\": user_id\n        }\n      }).then(res => res.json()).then(user => this.setCurrentUser(user));\n    }\n\n    this.setState({\n      loading: false,\n      clickedLead: [],\n      clickedLeadCalls: [],\n      clickedLeadAppointments: []\n    });\n  }\n\n  render() {\n    // console.log(\"i am clicked lead calls\",this.state.clickedLeadCalls)\n    //console.log(this.state.currentUser)\n    // console.log(this.state.currentUser.leads)\n    // console.log(this.state.appointments)\n    // console.log(this.state)\n    // console.log(this.props, 'I am in App')\n    if (this.state.loading) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"main-page-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      currentUser: this.state.currentUser,\n      logoutUser: this.logoutUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/leads/:id\",\n      render: routerProps => React.createElement(LeadActivityContainer, Object.assign({\n        currentUser: this.state.currentUser,\n        lead: this.state.clickedLead,\n        calls: this.state.clickedLeadCalls,\n        clickedLeadAppointments: this.state.clickedLeadAppointments,\n        addNewCall: this.addNewCall,\n        addNewAppointment: this.addNewAppointment,\n        editCallNoApp: this.editCallNoApp\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/new\",\n      render: routerProps => React.createElement(NewLeadContainer, Object.assign({\n        currentUser: this.state.currentUser,\n        addNewLead: this.addNewLead\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signup\",\n      render: routerProps => React.createElement(SignupForm, Object.assign({}, routerProps, {\n        getMyLocation: this.getMyLocation,\n        setCurrentUser: this.setCurrentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      render: routerProps => React.createElement(LoginForm, Object.assign({}, routerProps, {\n        getMyLocation: this.getMyLocation,\n        setCurrentUser: this.setCurrentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routerProps => React.createElement(MainContainer, Object.assign({\n        leads: this.state.leads,\n        onLeadClick: this.onLeadClick,\n        currentUser: this.state.currentUser,\n        appointments: this.state.appointments,\n        findLeadName: this.findLeadName\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/App.js"],"names":["React","Navbar","MainContainer","NewLeadContainer","LeadActivityContainer","SignupForm","LoginForm","Switch","Route","withRouter","api","App","Component","state","currentUser","leads","appointments","calls","clickedLead","clickedLeadCalls","clickedLeadAppointments","loading","setCurrentUser","user","setState","localStorage","user_id","id","props","history","push","logoutUser","removeItem","clear","getMyLocation","options","enableHighAccuracy","timeout","maximumAge","success","position","coordinateObj","coords","latitude","longitude","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","findLeadName","name","lead","find","first_name","last_name","onLeadClick","leadData","filter","lead_id","addNewLead","newLead","addNewCall","newCall","addNewAppointment","newAppointment","editCallNoApp","call","map","stateCall","componentDidMount","fetch","headers","then","res","json","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './components/Navbar'\nimport MainContainer from './containers/MainContainer';\nimport NewLeadContainer from './containers/NewLeadContainer';\nimport LeadActivityContainer from './containers/LeadActivityContainer';\nimport SignupForm from './components/SignupForm';\nimport LoginForm from './components/LoginForm'\n\nimport {Switch, Route, withRouter } from \"react-router-dom\";\n\nconst api = 'http://localhost:3000/api/v1/auto_login'\n\nclass App extends React.Component {\n\n  state = { \n    currentUser: null,\n    leads: [],\n    appointments: [],\n    calls: [],\n    clickedLead: [],\n    clickedLeadCalls: [],\n    clickedLeadAppointments: [],\n    loading: true\n }\n\n \n setCurrentUser = (user) => {\n   this.setState(\n     { \n       currentUser: user,\n       leads: user.leads,\n       calls: user.calls,\n       appointments: user.appointments\n      }, () => {\n        localStorage.user_id = user.id\n        this.props.history.push('/')\n      })\n }\n\n logoutUser = () => {\n   this.setState({ currentUser: null  }, () => {\n     localStorage.removeItem('user_id')\n     localStorage.clear()\n     this.props.history.push('/login')\n    })\n }\n\n getMyLocation = () => {\n  const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge:0\n  }\n  const success = (position) => {\n      const coordinateObj = position.coords\n      this.setState(\n          { \n              latitude: coordinateObj.latitude,  \n              longitude: coordinateObj.longitude\n          })\n  }\n  const error = (err) => {\n      console.warn(`ERROR'(${err.code})): ${err.message}`)\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options)\n}\n\n //Functions written to add lead activity ***************************************************************************************\n\n findLeadName = (id) => {\n  let name\n  let lead = this.state.leads.find(lead => lead.id === id)\n  name = `${lead.first_name} ${lead.last_name}`\n  return name\n}\n\n//to point us to the lead show page\n  onLeadClick = (leadData) => {\n    //  console.log(\"i am the clicked lead\", leadData.lead)\n     this.setState(\n       { \n         clickedLead: leadData.lead,\n         clickedLeadCalls: this.state.calls.filter(calls => calls.lead_id === leadData.lead.id), \n         clickedLeadAppointments: this.state.appointments.filter(appointments => appointments.lead_id === leadData.lead.id)\n        }, () => {\n       this.props.history.push(`/leads/${leadData.lead.id}`)\n     }) \n   }\n  //triggered by new lead form\n  addNewLead = (newLead) => {\n    this.setState (\n      {\n        ...this.state, \n        leads:  [...this.state.leads, newLead]\n        \n      }) \n  }\n\n  //triggered by user clicking on the phone number\n  addNewCall = (newCall) => {\n   this.setState(\n     {\n       ...this.state,\n       calls: [...this.state.calls, newCall],\n       clickedLeadCalls: [...this.state.clickedLeadCalls, newCall]  \n    });\n  }\n\n  addNewAppointment = (newAppointment) => {\n  this.setState(\n    {\n      ...this.state,\n      appointments: [...this.state.appointments, newAppointment],\n      clickedLeadAppointments: [...this.state.clickedLeadAppointments, newAppointment]  \n   });\n  }\n\n  //written for the cancel button on appointment form\n  editCallNoApp = (call) => {\n   this.setState(\n     { \n        ...this.state,\n        calls: [...this.state.calls.map(stateCall => {\n            if (stateCall.id === call.id) {\n              return call\n            } else {\n              return stateCall\n            }\n        })],  \n        clickedLeadCalls: [...this.state.clickedLeadCalls.map(stateCall => {\n          if (stateCall.id === call.id) {\n            return call\n          } else {\n            return stateCall\n          }\n      })]\n    });\n  }\n\n //End of Functions written to add lead activity ***********************************************************************************\n\n componentDidMount() {\n  //setup for auto_login\n\n  const user_id = localStorage.user_id\n  if (user_id) {\n    \n    fetch(api, {\n      headers: {\n        \"Authorization\": user_id\n      }\n    }).then(res => res.json()).then(user => this.setCurrentUser(user))\n  }\n\n  this.setState(\n    { \n      loading: false, \n      clickedLead: [],\n      clickedLeadCalls: [],\n      clickedLeadAppointments: []\n    })\n    \n }\n\n  render() {\n    // console.log(\"i am clicked lead calls\",this.state.clickedLeadCalls)\n    //console.log(this.state.currentUser)\n    // console.log(this.state.currentUser.leads)\n    // console.log(this.state.appointments)\n    // console.log(this.state)\n    // console.log(this.props, 'I am in App')\n\n    if (this.state.loading) {\n      return <h1>Loading...</h1>\n    }\n\n    return (\n      <div className=\"main-page-container\">\n          <div>\n              <Navbar currentUser={this.state.currentUser} logoutUser={this.logoutUser}/>\n\n              <Switch>\n              \n                <Route path=\"/leads/:id\" render={(routerProps) => <LeadActivityContainer \n                currentUser={this.state.currentUser}\n                lead={this.state.clickedLead}\n                calls={this.state.clickedLeadCalls}\n                clickedLeadAppointments={this.state.clickedLeadAppointments}\n                addNewCall={this.addNewCall}\n                addNewAppointment={this.addNewAppointment}\n                editCallNoApp={this.editCallNoApp}\n                {...routerProps}/> }></Route>\n\n                <Route path=\"/new\" render={(routerProps) => <NewLeadContainer\n                currentUser={this.state.currentUser} \n                addNewLead={this.addNewLead} \n                {...routerProps}/>}></Route> \n\n                <Route path=\"/signup\" render={(routerProps) => <SignupForm {...routerProps} getMyLocation={this.getMyLocation} setCurrentUser={this.setCurrentUser}/>}></Route>\n\n                <Route path=\"/login\" render={(routerProps) => <LoginForm {...routerProps} getMyLocation={this.getMyLocation} setCurrentUser={this.setCurrentUser}/>}></Route>\n\n                <Route exact path=\"/\" render={(routerProps) =>  <MainContainer \n                leads={this.state.leads} onLeadClick={this.onLeadClick} currentUser={this.state.currentUser}\n                appointments={this.state.appointments} findLeadName={this.findLeadName}\n                {...routerProps}/>}></Route>\n\n              </Switch>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}