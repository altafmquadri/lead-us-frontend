{"ast":null,"code":"var _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/WeeklyAppointmentsMetric.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Line } from 'react-chartjs-2';\n\nclass WeeklyAppointmentsMetric extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {// currentUser: this.props.currentUser,\n      // currentDate: moment(),\n      // appointmentDates: [],\n      // filteredAppointmentDatesByWeek: [],\n      // daysOfWeek: [],\n      // countOfApptInDaysOfWeek: [],\n      // lineChartData: {}\n    };\n  }\n\n  componentDidMount() {} // let newDates, filteredAppointmentDatesByWeek\n  // //take all appointments\n  // newDates = this.props.appointments.map(appointment => appointment.date)\n  // //take appointments and filter them by current week\n  // //compare today's date with the array of appointments\n  // filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'))\n  // this.setState(\n  //     { \n  //         appointmentDates: [...this.state.appointmentDates, ...newDates],\n  //         filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n  //         daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()],\n  //     }, () => this.setState(\n  //         {\n  //             countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]  \n  //         }, () => this.setState({ lineChartData: {...this.setLineChartData()}  })))\n  // getDaysOfTheWeek = () => {\n  //     let beginningOfWeek = moment().startOf('week')\n  //     let daysOfWeek = []\n  //     //used knowledge of today's date and the start of the week to iterate days to the end of the week\n  //     daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n  //     for (let i = 1; i < 7; i++) {\n  //         daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n  //     }\n  //     return daysOfWeek\n  // }\n  // // console.log(moment().isSame(moment('2019-12-23'),'date'))\n  // countOfApptInDaysOfWeek = (a, b) => {\n  //     let counts = []\n  //     for (let i = 0; i < a.length; i++) {\n  //         let count = 0;\n  //         for (let j = 0; j < b.length; j++) {\n  //             if (moment(b[j]).isSame(moment(a[i]))) {\n  //                 count++\n  //             }\n  //         }\n  //         counts.push(count)\n  //     }\n  //     return counts\n  // }\n  // setLineChartData = () => {\n  //     const chartData = {\n  //         labels: this.state.daysOfWeek,\n  //         datasets: [\n  //             {\n  //                 label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n  //                 data: this.state.countOfApptInDaysOfWeek,\n  //                 backgroundColor: [\n  //                     'rgba(255, 99, 132, 0.2)',\n  //                     'rgba(54, 162, 235, 0.2)',\n  //                     'rgba(255, 206, 86, 0.2)',\n  //                     'rgba(75, 192, 192, 0.2)',\n  //                     'rgba(153, 102, 255, 0.2)'\n  //                 ],\n  //                 borderColor: [\n  //                     'rgba(255, 99, 132, 1)',\n  //                     'rgba(54, 162, 235, 1)',\n  //                     'rgba(255, 206, 86, 1)',\n  //                     'rgba(75, 192, 192, 1)',\n  //                     'rgba(153, 102, 255, 1)'\n  //                 ],\n  //                 borderWidth: 1\n  //             }]\n  //     }\n  //     return chartData\n  // }\n\n\n  render() {\n    // console.log('i am the state ',this.state)\n    // console.log('i am the daysOfWeek ',this.state.daysOfWeek[0])\n    // console.log(this.state.currentDate.toDate())\n    // let beginningOfWeek = moment().startOf('week').add(6, 'days').toDate()\n    // let endOfWeek = moment().endOf('week').date()\n    // console.log('i am the days of the week ',this.getDaysOfTheWeek())\n    // console.log(this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek))\n    return React.createElement(\"div\", {\n      className: \"weekly-appointments-metric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Weekly Appointments\"), React.createElement(Line, {\n      data: this.state.lineChartData,\n      options: {\n        scales: {\n          yAxes: [{\n            display: true,\n            ticks: {\n              beginAtZero: true,\n              stepSize: 1\n            }\n          }]\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WeeklyAppointmentsMetric;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/WeeklyAppointmentsMetric.js"],"names":["React","Component","moment","Line","WeeklyAppointmentsMetric","state","componentDidMount","render","lineChartData","scales","yAxes","display","ticks","beginAtZero","stepSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,MAAMC,wBAAN,SAAuCH,SAAvC,CAAiD;AAAA;AAAA;AAAA,SAC7CI,KAD6C,GACrC,CACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAPI,KADqC;AAAA;;AAW7CC,EAAAA,iBAAiB,GAAG,CAgBnB,CAhBgB,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAC,EAAAA,MAAM,GAAG;AAEL;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA,WACQ;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEI,oBAAC,IAAD;AACI,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWG,aADrB;AAEI,MAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,OAAO,EAAE,IADL;AAEJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,WAAW,EAAE,IADV;AAEHC,cAAAA,QAAQ,EAAE;AAFP;AAFH,WAAD;AADH;AADH,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADR;AAmBH;;AAnH4C;;AAsHjD,eAAeV,wBAAf","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment'\nimport { Line } from 'react-chartjs-2'\n\nclass WeeklyAppointmentsMetric extends Component {\n    state = { \n        // currentUser: this.props.currentUser,\n        // currentDate: moment(),\n        // appointmentDates: [],\n        // filteredAppointmentDatesByWeek: [],\n        // daysOfWeek: [],\n        // countOfApptInDaysOfWeek: [],\n        // lineChartData: {}\n    }\n\n    componentDidMount() {\n        // let newDates, filteredAppointmentDatesByWeek\n        // //take all appointments\n        // newDates = this.props.appointments.map(appointment => appointment.date)\n        // //take appointments and filter them by current week\n        // //compare today's date with the array of appointments\n        // filteredAppointmentDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'))\n        // this.setState(\n        //     { \n        //         appointmentDates: [...this.state.appointmentDates, ...newDates],\n        //         filteredAppointmentDatesByWeek: [...this.state.filteredAppointmentDatesByWeek, ...filteredAppointmentDatesByWeek],\n        //         daysOfWeek: [...this.state.daysOfWeek, ...this.getDaysOfTheWeek()],\n        //     }, () => this.setState(\n        //         {\n        //             countOfApptInDaysOfWeek: [...this.state.countOfApptInDaysOfWeek, ...this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek)]  \n        //         }, () => this.setState({ lineChartData: {...this.setLineChartData()}  })))\n    }\n\n    // getDaysOfTheWeek = () => {\n    //     let beginningOfWeek = moment().startOf('week')\n    //     let daysOfWeek = []\n    //     //used knowledge of today's date and the start of the week to iterate days to the end of the week\n    //     daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n    //     for (let i = 1; i < 7; i++) {\n    //         daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n    //     }\n    //     return daysOfWeek\n    // }\n\n    // // console.log(moment().isSame(moment('2019-12-23'),'date'))\n    // countOfApptInDaysOfWeek = (a, b) => {\n    //     let counts = []\n    //     for (let i = 0; i < a.length; i++) {\n    //         let count = 0;\n    //         for (let j = 0; j < b.length; j++) {\n    //             if (moment(b[j]).isSame(moment(a[i]))) {\n    //                 count++\n    //             }\n    //         }\n    //         counts.push(count)\n    //     }\n    //     return counts\n    // }\n\n    // setLineChartData = () => {\n    //     const chartData = {\n    //         labels: this.state.daysOfWeek,\n    //         datasets: [\n    //             {\n    //                 label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n    //                 data: this.state.countOfApptInDaysOfWeek,\n    //                 backgroundColor: [\n    //                     'rgba(255, 99, 132, 0.2)',\n    //                     'rgba(54, 162, 235, 0.2)',\n    //                     'rgba(255, 206, 86, 0.2)',\n    //                     'rgba(75, 192, 192, 0.2)',\n    //                     'rgba(153, 102, 255, 0.2)'\n    //                 ],\n    //                 borderColor: [\n    //                     'rgba(255, 99, 132, 1)',\n    //                     'rgba(54, 162, 235, 1)',\n    //                     'rgba(255, 206, 86, 1)',\n    //                     'rgba(75, 192, 192, 1)',\n    //                     'rgba(153, 102, 255, 1)'\n    //                 ],\n    //                 borderWidth: 1\n    //             }]\n    //     }\n    //     return chartData\n    // }\n\n\n    render() {\n        \n        // console.log('i am the state ',this.state)\n        // console.log('i am the daysOfWeek ',this.state.daysOfWeek[0])\n        // console.log(this.state.currentDate.toDate())\n        \n        // let beginningOfWeek = moment().startOf('week').add(6, 'days').toDate()\n        // let endOfWeek = moment().endOf('week').date()\n        // console.log('i am the days of the week ',this.getDaysOfTheWeek())\n        // console.log(this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredAppointmentDatesByWeek))\n\n       \n       \n        return ( \n                <div className=\"weekly-appointments-metric\">\n                    <h2>Weekly Appointments</h2>\n                    <Line \n                        data={this.state.lineChartData}\n                        options={{\n                            scales: {\n                                yAxes: [{\n                                    display: true,\n                                    ticks: {\n                                        beginAtZero: true,\n                                        stepSize: 1\n                                    }\n                                }]\n                            }\n                        }}\n                    />\n                </div>\n        );\n    }\n}\n\nexport default WeeklyAppointmentsMetric;"]},"metadata":{},"sourceType":"module"}