{"ast":null,"code":"var _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/WeeklyPresentationMetric.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport { Polar } from 'react-chartjs-2';\n\nclass WeeklyPresentationMetric extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentDate: moment(),\n      currentUser: this.props.currentUser,\n      appointments: this.props.appointments,\n      weekAppointments: [],\n      presentations: [],\n      data: {}\n    };\n\n    this.setPolarChartData = () => {\n      polarChartData = {\n        datasets\n      };\n    };\n\n    this.getWeeklyPresentations = () => {\n      let filteredAppointmentsByWeek = this.state.appointments.filter(appointment => moment(appointment.date).isSame(this.state.currentDate, 'week'));\n      this.setState({\n        weekAppointments: filteredAppointmentsByWeek\n      });\n      let presentationAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['presentation_made?']);\n      return presentationAppointments;\n    };\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.currentUser !== this.props.currentUser) {\n      this.setState({\n        currentUser: this.props.currentUser,\n        appointments: this.props.appointments\n      }, () => this.setState({\n        presentations: this.getWeeklyPresentations()\n      }));\n    }\n  }\n\n  render() {\n    // console.log('i am props', this.props)\n    console.log('i am state', this.state); // console.log('filterAppp' , this.getWeeklyPresentations())\n\n    return React.createElement(\"div\", {\n      className: \"weekly-presentation-metric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Weekly Presentations\"));\n  }\n\n}\n\nexport default WeeklyPresentationMetric;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/WeeklyPresentationMetric.js"],"names":["React","moment","Polar","WeeklyPresentationMetric","Component","state","currentDate","currentUser","props","appointments","weekAppointments","presentations","data","setPolarChartData","polarChartData","datasets","getWeeklyPresentations","filteredAppointmentsByWeek","filter","appointment","date","isSame","setState","presentationAppointments","componentDidUpdate","prevState","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,iBAAtB;;AAEA,MAAMC,wBAAN,SAAuCH,KAAK,CAACI,SAA7C,CAAuD;AAAA;AAAA;AAAA,SAEnDC,KAFmD,GAE3C;AACJC,MAAAA,WAAW,EAAEL,MAAM,EADf;AAEJM,MAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWD,WAFpB;AAGJE,MAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAHrB;AAIJC,MAAAA,gBAAgB,EAAE,EAJd;AAKJC,MAAAA,aAAa,EAAE,EALX;AAMJC,MAAAA,IAAI,EAAE;AANF,KAF2C;;AAAA,SAWnDC,iBAXmD,GAW/B,MAAM;AACtBC,MAAAA,cAAc,GAAG;AACbC,QAAAA;AADa,OAAjB;AAGH,KAfkD;;AAAA,SA4BnDC,sBA5BmD,GA4B1B,MAAM;AAC3B,UAAIC,0BAA0B,GAAG,KAAKZ,KAAL,CAAWI,YAAX,CAAwBS,MAAxB,CAA+BC,WAAW,IAAIlB,MAAM,CAACkB,WAAW,CAACC,IAAb,CAAN,CAAyBC,MAAzB,CAAgC,KAAKhB,KAAL,CAAWC,WAA3C,EAAwD,MAAxD,CAA9C,CAAjC;AACA,WAAKgB,QAAL,CAAc;AAAEZ,QAAAA,gBAAgB,EAAEO;AAApB,OAAd;AACA,UAAIM,wBAAwB,GAAGN,0BAA0B,CAACC,MAA3B,CAAkCC,WAAW,IAAIA,WAAW,CAAC,oBAAD,CAA5D,CAA/B;AACA,aAAOI,wBAAP;AACH,KAjCkD;AAAA;;AAiBnDC,EAAAA,kBAAkB,CAACC,SAAD,EAAW;AACzB,QAAIA,SAAS,CAAClB,WAAV,KAA0B,KAAKC,KAAL,CAAWD,WAAzC,EAAsD;AAClD,WAAKe,QAAL,CACI;AACIf,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWD,WAD5B;AAEIE,QAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC;AAF7B,OADJ,EAKG,MAAM,KAAKa,QAAL,CAAc;AAAEX,QAAAA,aAAa,EAAE,KAAKK,sBAAL;AAAjB,OAAd,CALT;AAMH;AACJ;;AAUDU,EAAAA,MAAM,GAAG;AACL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,KAAKvB,KAA9B,EAFK,CAGL;;AACA,WACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,CADJ;AAKH;;AA7CkD;;AAgDvD,eAAeF,wBAAf","sourcesContent":["import React from 'react';\nimport moment from 'moment'\nimport { Polar } from 'react-chartjs-2'\n\nclass WeeklyPresentationMetric extends React.Component {\n\n    state = { \n        currentDate: moment(),\n        currentUser: this.props.currentUser,\n        appointments: this.props.appointments,\n        weekAppointments: [],\n        presentations: [],\n        data: {}\n    }\n\n    setPolarChartData = () => {\n        polarChartData = {\n            datasets\n        }\n    }\n\n    componentDidUpdate(prevState){\n        if (prevState.currentUser !== this.props.currentUser) {\n            this.setState(\n                { \n                    currentUser: this.props.currentUser,\n                    appointments: this.props.appointments,\n                     \n            }, () => this.setState({ presentations: this.getWeeklyPresentations()   }))\n        }\n    } \n    \n    getWeeklyPresentations = () => {\n        let filteredAppointmentsByWeek = this.state.appointments.filter(appointment => moment(appointment.date).isSame(this.state.currentDate, 'week'))\n        this.setState({ weekAppointments: filteredAppointmentsByWeek  });\n        let presentationAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['presentation_made?'])\n        return presentationAppointments\n    }\n\n\n    render() { \n        // console.log('i am props', this.props)\n        console.log('i am state',this.state)\n        // console.log('filterAppp' , this.getWeeklyPresentations())\n        return ( \n            <div className=\"weekly-presentation-metric\">\n                <h2>Weekly Presentations</h2>\n            </div>\n        );\n    }\n}\n\nexport default WeeklyPresentationMetric;"]},"metadata":{},"sourceType":"module"}