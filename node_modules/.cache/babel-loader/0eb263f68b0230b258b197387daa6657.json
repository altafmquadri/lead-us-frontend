{"ast":null,"code":"// import React, { Component, Fragment } from 'react';\n// import ReactMapGL, {Marker,  FlyToInterpolator} from 'react-map-gl'\n// import WebMercatorViewport from 'viewport-mercator-project';\n// import \"mapbox-gl/dist/mapbox-gl.css\"\n// const TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n// class Map extends Component {\n//     state = { \n//         viewport: {\n//             width: 980,\n//             height: 350,\n//             latitude: 0,\n//             longitude: 0,\n//             zoom: 11\n//         },\n//         showDirections: false\n//     }\n//     showDirections = () => {\n//         this.setState(\n//             { \n//                 ...this.state,\n//                 showDirections: !this.state.showDirections  \n//             })\n//     }\n//     getLeadLocation = () => {\n//         this.setState(\n//             {   \n//                 viewport: {...this.state.viewport, latitude: parseFloat(this.props.lead.latitude), longitude: parseFloat(this.props.lead.longitude)}\n//             })\n//     }\n//     getPositions = () => {\n//         const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n//         .fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]],{\n//             padding: 30,\n//             offset: [0, -35]\n//         })\n//         const viewport = {\n//             ...this.state.viewport,\n//             longitude,\n//             latitude,\n//             zoom,\n//             transitionDuration: 2000,\n//             transitionInterpolator: new FlyToInterpolator(),\n//         }\n//         this.setState({viewport})\n//     }\n//     componentDidMount() {\n//         this.getLeadLocation()\n//         this.initializeMapForDirections()\n//     }\n//     initializeMapForDirections = () => {\n//         let userLon =  parseFloat(this.props.user.longitude)\n//         let userLat = parseFloat(this.props.user.latitude)\n//         let clientLon = parseFloat(this.props.lead.longitude)\n//         let clientLat = parseFloat(this.props.lead.latitude)\n//         // if address is faulty \n//         if (clientLon === 0 && clientLat === 0) return\n//         const map = this.reactMap.getMap()\n//         const start = [userLon, userLat]\n//         const end = [clientLon, clientLat]\n//         const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n//         const getRoute = (start, end) => {\n//             fetch(directionsApi).then(res => res.json()).then(res => {\n//                 if (res.routes === undefined) return //added in case fake address\n//                 let data = res.routes[0]\n//                 // console.log(data)\n//                 let route = data.geometry.coordinates\n//                 let geojson = {\n//                     type: 'Feature',\n//                     properties: {},\n//                     geometry: {\n//                         type: 'LineString',\n//                         coordinates: route\n//                     }\n//                 }\n//                 if (map.getSource('route')){\n//                     map.getSource('route').setData(geojson)\n//                 } else {\n//                     map.addLayer({\n//                         id: 'route',\n//                         type: 'line',\n//                         source: {\n//                             type: 'geojson',\n//                             data: {\n//                                 type: 'Feature',\n//                                 properties: {},\n//                                 geometry: {\n//                                     type: 'LineString',\n//                                     coordinates: geojson\n//                                 }\n//                             }\n//                         },\n//                         layout: {\n//                             'line-join': 'round',\n//                             'line-cap': 'round'\n//                         },\n//                         paint: {\n//                             'line-color': '#3887be',\n//                             'line-width': 5,\n//                             'line-opacity': 0.75\n//                         }\n//                     })\n//                 }\n//                 //turn instructions here\n//                 const instructions = document.getElementById('instructions')\n//                 const steps = data.legs[0].steps\n//                 // console.log(steps)\n//                 const tripInstructions = []\n//                 for (let i = 0; i < steps.length; i++) {\n//                     tripInstructions.push('<li>' + steps[i].maneuver.instruction + '</li>')\n//                     instructions.innerHTML = '<br><span class=\"duration\">Trip duration: ' + Math.floor(data.duration / 60) + ' min </span>' + tripInstructions.join('')\n//                 }\n//                 // console.log(tripInstructions)\n//             }) //end fetch\n//         } //end function getRoute\n//         map.on('load', function() {\n//             map.addLayer({\n//                 id: 'point',\n//                 type: 'circle',\n//                 source: {\n//                     type: 'geojson',\n//                     data: {\n//                         type: 'FeatureCollection',\n//                         features: [{\n//                             type: 'Feature',\n//                             properties: {},\n//                             geometry: {\n//                                 type:'Point',\n//                                 coordinates: start\n//                             }\n//                         }]\n//                     }\n//                 }, //end source object of start position lon lat\n//                 paint: {\n//                     'circle-radius': 10,\n//                     'circle-color': '#3887be'\n//                 }\n//             }) //end start map layer\n//             // took out code from where var end is defined in tutorial\n//             if (map.getLayer('end')) {\n//                 map.getSource('end').setData(end)\n//             } else {\n//                 map.addLayer({\n//                     id: 'end',\n//                     type: 'circle',\n//                     source: {\n//                         type: 'geojson',\n//                         data: {\n//                             type: 'FeatureCollection',\n//                             features: [{\n//                                 type: 'Feature',\n//                                 properties: {},\n//                                 geometry: {\n//                                     type: 'Point',\n//                                     coordinates: end\n//                                 }\n//                             }]\n//                         }\n//                     }, // end source object of end position lon lat\n//                     paint: {\n//                         'circle-radius': 10,\n//                         'circle-color': '#f30'\n//                     }\n//                 }) //end end of map layer\n//             }\n//         })\n//         getRoute(start, end)\n//     } //end initialize map for directions\n//     render() {  \n//         return ( \n//             <div className=\"map\">\n//                 <div onMouseLeave={this.showDirections} \n//                 style={{display: this.state.showDirections ? 'block' : 'none'}} \n//                 id=\"instructions\"></div>\n//                 <ReactMapGL\n//                     mapboxApiAccessToken={TOKEN}\n//                     mapStyle='mapbox://styles/mapbox/navigation-guidance-day-v4'\n//                     {...this.state.viewport}\n//                     onViewportChange={(viewport) => this.setState({viewport})}\n//                     ref={(reactMap) => this.reactMap = reactMap}>\n//                     <button onClick={this.getPositions}>Get Positions</button>\n//                     <button onClick={this.initializeMapForDirections}>Show Route</button>\n//                     <button onClick={this.showDirections}>Get Directions</button>\n//                         <Fragment>\n//                             <Marker latitude={parseFloat(this.props.lead.latitude)} longitude={parseFloat(this.props.lead.longitude)}>\n//                                 Client\n//                             </Marker>\n//                             <Marker latitude={parseFloat(this.props.user.latitude)} longitude={parseFloat(this.props.user.longitude)}>\n//                                 You\n//                             </Marker>\n//                         </Fragment>\n//                 </ReactMapGL>\n//             </div>\n//         )\n//     }\n// }\n// export default Map;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js"],"names":[],"mappingssourcesContent":["// import React, { Component, Fragment } from 'react';\n// import ReactMapGL, {Marker,  FlyToInterpolator} from 'react-map-gl'\n// import WebMercatorViewport from 'viewport-mercator-project';\n// import \"mapbox-gl/dist/mapbox-gl.css\"\n\n// const TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n\n// class Map extends Component {\n\n//     state = { \n//         viewport: {\n//             width: 980,\n//             height: 350,\n//             latitude: 0,\n//             longitude: 0,\n//             zoom: 11\n//         },\n//         showDirections: false\n//     }\n    \n//     showDirections = () => {\n//         this.setState(\n//             { \n//                 ...this.state,\n//                 showDirections: !this.state.showDirections  \n//             })\n//     }\n\n//     getLeadLocation = () => {\n//         this.setState(\n//             {   \n//                 viewport: {...this.state.viewport, latitude: parseFloat(this.props.lead.latitude), longitude: parseFloat(this.props.lead.longitude)}\n//             })\n//     }\n\n//     getPositions = () => {\n//         const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n//         .fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]],{\n//             padding: 30,\n//             offset: [0, -35]\n//         })\n//         const viewport = {\n//             ...this.state.viewport,\n//             longitude,\n//             latitude,\n//             zoom,\n//             transitionDuration: 2000,\n//             transitionInterpolator: new FlyToInterpolator(),\n            \n//         }\n//         this.setState({viewport})\n//     }\n\n//     componentDidMount() {\n//         this.getLeadLocation()\n//         this.initializeMapForDirections()\n//     }\n    \n//     initializeMapForDirections = () => {\n\n//         let userLon =  parseFloat(this.props.user.longitude)\n//         let userLat = parseFloat(this.props.user.latitude)\n//         let clientLon = parseFloat(this.props.lead.longitude)\n//         let clientLat = parseFloat(this.props.lead.latitude)\n\n//         // if address is faulty \n//         if (clientLon === 0 && clientLat === 0) return\n\n//         const map = this.reactMap.getMap()\n//         const start = [userLon, userLat]\n//         const end = [clientLon, clientLat]\n        \n//         const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n\n//         const getRoute = (start, end) => {\n//             fetch(directionsApi).then(res => res.json()).then(res => {\n//                 if (res.routes === undefined) return //added in case fake address\n//                 let data = res.routes[0]\n//                 // console.log(data)\n//                 let route = data.geometry.coordinates\n//                 let geojson = {\n//                     type: 'Feature',\n//                     properties: {},\n//                     geometry: {\n//                         type: 'LineString',\n//                         coordinates: route\n//                     }\n//                 }\n                \n//                 if (map.getSource('route')){\n//                     map.getSource('route').setData(geojson)\n//                 } else {\n//                     map.addLayer({\n//                         id: 'route',\n//                         type: 'line',\n//                         source: {\n//                             type: 'geojson',\n//                             data: {\n//                                 type: 'Feature',\n//                                 properties: {},\n//                                 geometry: {\n//                                     type: 'LineString',\n//                                     coordinates: geojson\n//                                 }\n//                             }\n//                         },\n//                         layout: {\n//                             'line-join': 'round',\n//                             'line-cap': 'round'\n//                         },\n//                         paint: {\n//                             'line-color': '#3887be',\n//                             'line-width': 5,\n//                             'line-opacity': 0.75\n//                         }\n//                     })\n//                 }\n//                 //turn instructions here\n//                 const instructions = document.getElementById('instructions')\n//                 const steps = data.legs[0].steps\n//                 // console.log(steps)\n                \n//                 const tripInstructions = []\n//                 for (let i = 0; i < steps.length; i++) {\n//                     tripInstructions.push('<li>' + steps[i].maneuver.instruction + '</li>')\n//                     instructions.innerHTML = '<br><span class=\"duration\">Trip duration: ' + Math.floor(data.duration / 60) + ' min </span>' + tripInstructions.join('')\n//                 }\n//                 // console.log(tripInstructions)\n//             }) //end fetch\n//         } //end function getRoute\n        \n//         map.on('load', function() {\n//             map.addLayer({\n//                 id: 'point',\n//                 type: 'circle',\n//                 source: {\n//                     type: 'geojson',\n//                     data: {\n//                         type: 'FeatureCollection',\n//                         features: [{\n//                             type: 'Feature',\n//                             properties: {},\n//                             geometry: {\n//                                 type:'Point',\n//                                 coordinates: start\n//                             }\n//                         }]\n//                     }\n//                 }, //end source object of start position lon lat\n//                 paint: {\n//                     'circle-radius': 10,\n//                     'circle-color': '#3887be'\n//                 }\n//             }) //end start map layer\n//             // took out code from where var end is defined in tutorial\n//             if (map.getLayer('end')) {\n//                 map.getSource('end').setData(end)\n//             } else {\n//                 map.addLayer({\n//                     id: 'end',\n//                     type: 'circle',\n//                     source: {\n//                         type: 'geojson',\n//                         data: {\n//                             type: 'FeatureCollection',\n//                             features: [{\n//                                 type: 'Feature',\n//                                 properties: {},\n//                                 geometry: {\n//                                     type: 'Point',\n//                                     coordinates: end\n//                                 }\n//                             }]\n//                         }\n//                     }, // end source object of end position lon lat\n//                     paint: {\n//                         'circle-radius': 10,\n//                         'circle-color': '#f30'\n//                     }\n//                 }) //end end of map layer\n//             }\n//         })\n//         getRoute(start, end)\n//     } //end initialize map for directions\n\n//     render() {  \n//         return ( \n//             <div className=\"map\">\n//                 <div onMouseLeave={this.showDirections} \n//                 style={{display: this.state.showDirections ? 'block' : 'none'}} \n//                 id=\"instructions\"></div>\n//                 <ReactMapGL\n//                     mapboxApiAccessToken={TOKEN}\n//                     mapStyle='mapbox://styles/mapbox/navigation-guidance-day-v4'\n//                     {...this.state.viewport}\n//                     onViewportChange={(viewport) => this.setState({viewport})}\n//                     ref={(reactMap) => this.reactMap = reactMap}>\n\n//                     <button onClick={this.getPositions}>Get Positions</button>\n//                     <button onClick={this.initializeMapForDirections}>Show Route</button>\n//                     <button onClick={this.showDirections}>Get Directions</button>\n\n//                         <Fragment>\n//                             <Marker latitude={parseFloat(this.props.lead.latitude)} longitude={parseFloat(this.props.lead.longitude)}>\n//                                 Client\n//                             </Marker>\n//                             <Marker latitude={parseFloat(this.props.user.latitude)} longitude={parseFloat(this.props.user.longitude)}>\n//                                 You\n//                             </Marker>\n//                         </Fragment>\n\n//                 </ReactMapGL>\n//             </div>\n//         )\n//     }\n// }\n\n// export default Map;"]},"metadata":{},"sourceType":"module"}