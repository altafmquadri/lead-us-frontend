{"ast":null,"code":"var _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/LeadActivityContainer.js\";\nimport React from 'react';\nimport './LeadActivityContainer.css';\nimport ShowLeadContainer from './ShowLeadContainer';\nimport CallsContainer from './CallsContainer';\nimport CallForm from '../components/CallForm';\nimport AppointmentsContainer from './AppointmentsContainer';\nimport AppointmentForm from '../components/AppointmentForm';\nimport Map from './Map';\nimport AppointmentUpdateForm from '../components/AppointmentUpdateForm';\nconst callsApi = 'http://localhost:3000/api/v1/calls';\nconst callsApiUpdate = 'http://localhost:3000/api/v1/calls';\nconst appointmentsApi = 'http://localhost:3000/api/v1/appointments';\n\nclass LeadActivityContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //for both\n      user_id: '',\n      lead_id: this.props.lead.id,\n      //for calls\n      callForm: false,\n      appointmentForm: false,\n      call_status: \"No Answer\",\n      'appointment_made?': false,\n      'archive_lead?': false,\n      callsSubmitted: false,\n      //for appointments\n      title: \"\",\n      date: \"\",\n      start_time: \"\",\n      end_time: \"\",\n      'presentation_made?': false,\n      'made_sale?': false,\n      //to get call id in case appointment is not set\n      callId: '',\n      //edit appointment form\n      editAppointment: false\n    };\n\n    this.setInitialState = () => {\n      this.setState({\n        user_id: this.props.currentUser.id,\n        lead_id: this.props.lead.id,\n        callForm: false,\n        appointmentForm: false,\n        call_status: \"No Answer\",\n        'appointment_made?': false,\n        'archive_lead?': false,\n        callsSubmitted: false,\n        title: \"\",\n        date: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        'presentation_made?': false,\n        'made_sale?': false\n      });\n    };\n\n    this.noAppUpdate = e => {\n      e.preventDefault();\n      fetch(callsApiUpdate + '/' + this.state.callId, {\n        method: 'PATCH',\n        headers: {\n          'Content-type': 'application/json',\n          Accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          id: this.state.callId,\n          'appointment_made?': false\n        })\n      }).then(res => res.json()).then(call => {\n        this.props.editCallNoApp(call);\n        this.setInitialState();\n      });\n    };\n\n    this.setAppointmentState = () => {\n      this.setState({\n        user_id: this.props.currentUser.id,\n        lead_id: this.props.lead.id,\n        callForm: false,\n        appointmentForm: true,\n        call_status: \"No Answer\",\n        'appointment_made?': false,\n        'archive_lead?': false,\n        callsSubmitted: true,\n        title: \"\",\n        date: \"\",\n        start_time: \"\",\n        end_time: \"\" // 'presentation_made?': false,\n        // 'made_sale?': false\n\n      });\n    };\n\n    this.onPhoneClick = () => {\n      this.setState({\n        callForm: !this.state.callForm,\n        lead_id: this.props.lead.id\n      });\n    };\n\n    this.onEditAppointmentClick = appointment => {\n      this.setState({\n        editAppointment: !this.state.editAppointment\n      });\n      console.log(appointment);\n    };\n\n    this.onFormChange = e => {\n      this.setState({\n        call_status: e.target.value\n      });\n    };\n\n    this.onToggleArchive = () => {\n      this.setState({\n        'archive_lead?': !this.state['archive_lead?']\n      });\n    };\n\n    this.onToggleAppointment = () => {\n      this.setState({\n        'appointment_made?': !this.state['appointment_made?']\n      });\n    };\n\n    this.onFormSubmission = e => {\n      e.preventDefault();\n\n      if (this.state['appointment_made?'] === false) {\n        fetch(callsApi, {\n          method: 'POST',\n          headers: {\n            \"Content-type\": 'application/json',\n            Accepts: 'application/json'\n          },\n          body: JSON.stringify({\n            user_id: this.state.user_id,\n            lead_id: this.state.lead_id,\n            call_status: this.state.call_status,\n            'appointment_made?': this.state['appointment_made?'],\n            'archive_lead?': this.state['archive_lead?']\n          })\n        }).then(resp => resp.json()).then(call => this.props.addNewCall(call));\n        this.setInitialState();\n        this.setState({\n          callsSubmitted: true\n        });\n      } else if (this.state['appointment_made?']) {\n        fetch(callsApi, {\n          method: 'POST',\n          headers: {\n            \"Content-type\": 'application/json',\n            Accepts: 'application/json'\n          },\n          body: JSON.stringify({\n            user_id: this.state.user_id,\n            lead_id: this.state.lead_id,\n            call_status: this.state.call_status,\n            'appointment_made?': this.state['appointment_made?'],\n            'archive_lead?': this.state['archive_lead?']\n          })\n        }).then(resp => resp.json()).then(call => {\n          this.props.addNewCall(call);\n          this.setAppointmentState();\n          this.setState({\n            callId: call.id\n          });\n        });\n      }\n    };\n\n    this.onAppointmentSubmit = e => {\n      e.preventDefault();\n      let newStartTime = this.state.date + 'T' + this.state.start_time;\n      let newEndTime = this.state.date + 'T' + this.state.end_time;\n      console.log(newStartTime);\n      fetch(appointmentsApi, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n          Accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: this.state.user_id,\n          lead_id: this.state.lead_id,\n          title: this.state.title,\n          date: this.state.date,\n          start_time: newStartTime,\n          end_time: newEndTime,\n          'presentation_made?': this.state['presentation_made?'],\n          'made_sale?': this.state['made_sale?']\n        })\n      }).then(res => res.json()).then(appointment => this.props.addNewAppointment(appointment));\n      this.setInitialState();\n    };\n\n    this.partialFormHandler = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    let newState = this.props.currentUser === null ? localStorage.user_id : this.props.currentUser.id; // console.log(\"i am newstate:\",newState)\n\n    this.setState({\n      user_id: newState\n    });\n  }\n\n  render() {\n    // console.log('I am from props in leadActCont',this.props)\n    // console.log('I am from state in leadActCont',this.state)\n    // console.log(\"i am localstorage:\" ,localStorage.user_id)\n    return React.createElement(\"div\", {\n      className: \"activity-show-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"lead-show-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(ShowLeadContainer, {\n      lead: this.props.lead,\n      onPhoneClick: this.onPhoneClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(CallsContainer, {\n      calls: this.props.calls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(AppointmentsContainer, {\n      clickedLeadAppointments: this.props.clickedLeadAppointments,\n      onEditAppointmentClick: this.onEditAppointmentClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })), this.state.callForm && !this.state.appointmentForm ? React.createElement(CallForm, {\n      calls: this.props.calls,\n      formData: this.state,\n      onToggleArchive: this.onToggleArchive,\n      onFormSubmission: this.onFormSubmission,\n      onToggleAppointment: this.onToggleAppointment,\n      onFormChange: this.onFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }) : null, this.state.appointmentForm ? React.createElement(AppointmentForm, {\n      formData: this.state,\n      partialFormHandler: this.partialFormHandler,\n      noAppUpdate: this.noAppUpdate,\n      onAppointmentSubmit: this.onAppointmentSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }) : null, this.state.editAppointment ? React.createElement(AppointmentUpdateForm, {\n      formData: this.state,\n      onTogglePresentation: this.onTogglePresentation,\n      onToggleSale: this.onToggleSale,\n      editTheAppointment: this.props.editTheAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      className: \"map-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Map, {\n      lead: this.props.lead,\n      user: this.props.currentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default LeadActivityContainer;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/LeadActivityContainer.js"],"names":["React","ShowLeadContainer","CallsContainer","CallForm","AppointmentsContainer","AppointmentForm","Map","AppointmentUpdateForm","callsApi","callsApiUpdate","appointmentsApi","LeadActivityContainer","Component","state","user_id","lead_id","props","lead","id","callForm","appointmentForm","call_status","callsSubmitted","title","date","start_time","end_time","callId","editAppointment","setInitialState","setState","currentUser","noAppUpdate","e","preventDefault","fetch","method","headers","Accepts","body","JSON","stringify","then","res","json","call","editCallNoApp","setAppointmentState","onPhoneClick","onEditAppointmentClick","appointment","console","log","onFormChange","target","value","onToggleArchive","onToggleAppointment","onFormSubmission","resp","addNewCall","onAppointmentSubmit","newStartTime","newEndTime","addNewAppointment","partialFormHandler","name","componentDidMount","newState","localStorage","render","calls","clickedLeadAppointments","onTogglePresentation","onToggleSale","editTheAppointment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './LeadActivityContainer.css'\nimport ShowLeadContainer from './ShowLeadContainer';\nimport CallsContainer from './CallsContainer';\nimport CallForm from '../components/CallForm'\nimport AppointmentsContainer from './AppointmentsContainer';\nimport AppointmentForm from '../components/AppointmentForm'\nimport Map from './Map'\nimport AppointmentUpdateForm from '../components/AppointmentUpdateForm';\n\nconst callsApi = 'http://localhost:3000/api/v1/calls'\nconst callsApiUpdate = 'http://localhost:3000/api/v1/calls'\nconst appointmentsApi = 'http://localhost:3000/api/v1/appointments'\n\nclass LeadActivityContainer extends React.Component {\n    state = { \n\n        //for both\n        user_id: '',\n        lead_id: this.props.lead.id,\n\n        //for calls\n        callForm: false,\n        appointmentForm: false,\n        call_status: \"No Answer\",\n        'appointment_made?': false,\n        'archive_lead?': false,\n        callsSubmitted: false,\n\n        //for appointments\n        title: \"\",\n        date: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        'presentation_made?': false,\n        'made_sale?': false,\n\n        //to get call id in case appointment is not set\n        callId: '',\n\n        //edit appointment form\n        editAppointment: false\n\n    }\n\n    setInitialState = () => {\n        this.setState({ \n            user_id: this.props.currentUser.id, \n            lead_id: this.props.lead.id,\n            callForm: false,\n            appointmentForm: false,\n            call_status: \"No Answer\",\n            'appointment_made?': false,\n            'archive_lead?': false,\n            callsSubmitted: false,\n\n            title: \"\",\n            date: \"\",\n            start_time: \"\",\n            end_time: \"\",\n            'presentation_made?': false,\n            'made_sale?': false\n        });\n    }\n\n    noAppUpdate = (e) => {\n        e.preventDefault()\n        fetch(callsApiUpdate + '/' + this.state.callId, {\n            method: 'PATCH',\n            headers: {\n                'Content-type': 'application/json',\n                Accepts: 'application/json'\n            },\n            body: JSON.stringify({\n                id: this.state.callId,\n                'appointment_made?': false\n            })\n        }).then(res => res.json()).then(call => {\n            this.props.editCallNoApp(call)\n            this.setInitialState()\n        })\n    }\n\n        setAppointmentState = () => {\n        this.setState({ \n            user_id: this.props.currentUser.id, \n            lead_id: this.props.lead.id,\n            callForm: false,\n            appointmentForm: true,\n            call_status: \"No Answer\",\n            'appointment_made?': false,\n            'archive_lead?': false,\n            callsSubmitted: true,\n\n            title: \"\",\n            date: \"\",\n            start_time: \"\",\n            end_time: \"\",\n            // 'presentation_made?': false,\n            // 'made_sale?': false\n            \n        });\n    }\n\n    onPhoneClick = () => {\n        this.setState(\n            { callForm: !this.state.callForm,\n            lead_id: this.props.lead.id\n        });\n    }\n\n    onEditAppointmentClick = (appointment) => {\n        this.setState({ editAppointment: !this.state.editAppointment })\n        console.log(appointment)\n    } \n\n    onFormChange = (e) => {\n        this.setState({ call_status: e.target.value  });\n    }\n\n    onToggleArchive = () => {\n        this.setState({ 'archive_lead?': !this.state['archive_lead?']  });\n    }\n\n    onToggleAppointment = () => {\n        this.setState({ 'appointment_made?': !this.state['appointment_made?']  });\n    }\n\n    onFormSubmission = (e) => {\n        e.preventDefault()\n\n        if (this.state['appointment_made?'] === false) {\n            fetch(callsApi, {\n                method: 'POST',\n                headers: {\n                    \"Content-type\": 'application/json',\n                    Accepts: 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: this.state.user_id,\n                    lead_id: this.state.lead_id,\n                    call_status: this.state.call_status,\n                    'appointment_made?': this.state['appointment_made?'],\n                    'archive_lead?': this.state['archive_lead?']\n                })\n            }).then(resp => resp.json()).then(call => this.props.addNewCall(call))\n            this.setInitialState()\n            this.setState({ callsSubmitted: true  });\n\n        } else if (this.state['appointment_made?']) {\n            fetch(callsApi, {\n                method: 'POST',\n                headers: {\n                    \"Content-type\": 'application/json',\n                    Accepts: 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: this.state.user_id,\n                    lead_id: this.state.lead_id,\n                    call_status: this.state.call_status,\n                    'appointment_made?': this.state['appointment_made?'],\n                    'archive_lead?': this.state['archive_lead?']\n                })\n            }).then(resp => resp.json()).then(call => {\n                this.props.addNewCall(call)\n                this.setAppointmentState()\n                this.setState({ callId: call.id });\n            })    \n        }\n    }\n\n    onAppointmentSubmit = (e) => {\n        e.preventDefault()\n        let newStartTime = this.state.date + 'T' + this.state.start_time\n        let newEndTime = this.state.date + 'T' + this.state.end_time\n\n        console.log(newStartTime)\n\n        fetch(appointmentsApi, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n                Accepts: 'application/json'\n            },\n            body: JSON.stringify({\n                user_id: this.state.user_id,\n                lead_id: this.state.lead_id,\n                title: this.state.title,\n                date: this.state.date,\n                start_time: newStartTime,\n                end_time: newEndTime,\n                'presentation_made?': this.state['presentation_made?'],\n                'made_sale?': this.state['made_sale?']\n            })\n        }).then(res => res.json()).then(appointment => this.props.addNewAppointment(appointment))\n        this.setInitialState()\n    }\n\n    partialFormHandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value  });\n    }\n\n    componentDidMount() {\n\n        let newState = (this.props.currentUser === null ? localStorage.user_id :this.props.currentUser.id )\n        // console.log(\"i am newstate:\",newState)\n        this.setState({ user_id: newState   });\n    }\n\n    \n\n    render() { \n        // console.log('I am from props in leadActCont',this.props)\n        // console.log('I am from state in leadActCont',this.state)\n        // console.log(\"i am localstorage:\" ,localStorage.user_id)\n        return ( \n            <div className=\"activity-show-page\">\n                <div className=\"lead-show-page\">\n                    <ShowLeadContainer lead={this.props.lead} onPhoneClick={this.onPhoneClick}/>\n                    <CallsContainer calls={this.props.calls} />\n                    <AppointmentsContainer \n                    clickedLeadAppointments={this.props.clickedLeadAppointments}\n                    onEditAppointmentClick={this.onEditAppointmentClick}/>\n                </div>\n\n                {/* call form is true and appointment form is false just show call form, if appointment \n                form is true upon submission, do not show the call form */}\n                {this.state.callForm  && !this.state.appointmentForm ? <CallForm calls={this.props.calls} \n                formData={this.state}\n                onToggleArchive={this.onToggleArchive}\n                onFormSubmission={this.onFormSubmission}\n                onToggleAppointment={this.onToggleAppointment}\n                onFormChange={this.onFormChange}/> : null }\n\n                {/* appointment form is true just show appoinment form} */}\n                {this.state.appointmentForm ? <AppointmentForm formData={this.state}\n                partialFormHandler={this.partialFormHandler}\n                \n                noAppUpdate={this.noAppUpdate}\n                onAppointmentSubmit={this.onAppointmentSubmit}\n                /> : null}\n\n                {/* edit appointment form */}\n                {this.state.editAppointment ? <AppointmentUpdateForm\n                formData={this.state}\n                onTogglePresentation={this.onTogglePresentation}\n                onToggleSale={this.onToggleSale}\n                editTheAppointment={this.props.editTheAppointment}\n                /> :null}\n\n                <div className=\"map-div\">\n                    <Map lead={this.props.lead} user={this.props.currentUser}/>\n                </div>\n\n            </div>\n                \n            );\n        }\n    }\n    \n    export default LeadActivityContainer;"]},"metadata":{},"sourceType":"module"}