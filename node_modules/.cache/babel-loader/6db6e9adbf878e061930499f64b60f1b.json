{"ast":null,"code":"var _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/MetricsContainer.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport WeeklyAppointmentsMetric from '../components/WeeklyAppointmentsMetric';\nimport WeeklyProduction from '../components/WeeklyProduction';\nimport './MetricsContainer.css';\n\nclass MetricsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: [],\n      sales: [],\n      currentDate: moment(),\n      appointments: [],\n      appointmentDates: [],\n      filteredAppointmentDatesByWeek: [],\n      daysOfWeek: [],\n      countOfApptInDaysOfWeek: [],\n      lineChartData: {},\n      weekAppointments: [],\n      presentations: [],\n      weeklySales: [],\n      polarChartData: {},\n      weeklyFilteredSales: [],\n      salesAmount: 0\n    };\n\n    this.getDaysOfTheWeek = () => {\n      let beginningOfWeek = moment().startOf('week');\n      let daysOfWeek = []; //used knowledge of today's date and the start of the week to iterate days to the end of the week\n\n      daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'));\n\n      for (let i = 1; i < 7; i++) {\n        daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'));\n      }\n\n      return daysOfWeek;\n    };\n\n    this.countOfApptInDaysOfWeek = (a, b) => {\n      let counts = [];\n\n      for (let i = 0; i < a.length; i++) {\n        // initialize all the current week's days to a count of zero\n        let count = 0;\n\n        for (let j = 0; j < b.length; j++) {\n          //if there is a date that matches the current weekday, then increment that date's count by 1\n          if (moment(b[j]).isSame(moment(a[i]))) {\n            count++;\n          }\n        }\n\n        counts.push(count);\n      }\n\n      return counts;\n    };\n\n    this.getWeeklyPresentations = () => {\n      let filteredAppointmentsByWeek = this.state.appointments.filter(appointment => moment(appointment.date).isSame(this.state.currentDate, 'week'));\n      let salesonWeeklyAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['made_sale?']);\n      this.setState({\n        weekAppointments: filteredAppointmentsByWeek,\n        weeklySales: salesonWeeklyAppointments\n      }, () => this.setState({\n        polarChartData: this.setPolarChartData()\n      }));\n      let presentationAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['presentation_made?']);\n      return presentationAppointments;\n    };\n\n    this.setLineChartData = () => {\n      const chartData = {\n        labels: this.state.daysOfWeek,\n        datasets: [{\n          label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n          data: this.state.countOfApptInDaysOfWeek,\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return chartData;\n    };\n\n    this.setPolarChartData = () => {\n      const polarChartData = {\n        labels: ['Appointments', 'Presentations', 'Sales'],\n        datasets: [{\n          label: `$Weekly Presentation`,\n          data: [this.state.weekAppointments.length, this.state.presentations.length, this.state.weeklySales.length],\n          backgroundColor: ['rgba(153, 102, 255, 0.2)', 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n          borderWidth: 1\n        }]\n      };\n      return polarChartData;\n    };\n\n    this.getSalesForTheCurrentWeek = (a, b) => {\n      // if (a === undefined || b === undefined) return\n      let sales = a; // total of all sales user has\n\n      let weekSales = b; // all this current week sales\n\n      let weekSalesids = weekSales.map(wSale => wSale.lead_id); //week sales are all the appointments\n\n      let weeklyFilteredSales = sales.filter(sale => weekSalesids.includes(sale.lead_id)); // want all of the total sales that correspond to the week\n\n      this.setState({\n        weeklyFilteredSales: [...weeklyFilteredSales]\n      }); //sum up all the annualized life premiums for the week\n\n      let salesAmount = weeklyFilteredSales.reduce((total, alp) => {\n        return total + alp.annualized_life_premium;\n      }, 0);\n      this.setState({\n        salesAmount: salesAmount\n      });\n    };\n  }\n\n  render() {\n    console.log(this.state); // console.log(this.getSalesForTheCurrentWeek(this.state.currentUser.sales, this.state.weeklySales))\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Metrics\"), React.createElement(\"div\", {\n      className: \"metrics-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(WeeklyAppointmentsMetric, {\n      lineChartData: this.state.lineChartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(WeeklyProduction, {\n      polarChartData: this.state.polarChartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MetricsContainer;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/MetricsContainer.js"],"names":["React","moment","WeeklyAppointmentsMetric","WeeklyProduction","MetricsContainer","Component","state","currentUser","sales","currentDate","appointments","appointmentDates","filteredAppointmentDatesByWeek","daysOfWeek","countOfApptInDaysOfWeek","lineChartData","weekAppointments","presentations","weeklySales","polarChartData","weeklyFilteredSales","salesAmount","getDaysOfTheWeek","beginningOfWeek","startOf","push","format","i","add","a","b","counts","length","count","j","isSame","getWeeklyPresentations","filteredAppointmentsByWeek","filter","appointment","date","salesonWeeklyAppointments","setState","setPolarChartData","presentationAppointments","setLineChartData","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","getSalesForTheCurrentWeek","weekSales","weekSalesids","map","wSale","lead_id","sale","includes","reduce","total","alp","annualized_life_premium","render","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment'\nimport WeeklyAppointmentsMetric from '../components/WeeklyAppointmentsMetric';\nimport WeeklyProduction from '../components/WeeklyProduction';\nimport './MetricsContainer.css'\n\nclass MetricsContainer extends React.Component {\n    state = { \n        currentUser: [],\n        sales: [],\n        currentDate: moment(),\n        appointments: [],\n        appointmentDates: [],\n        filteredAppointmentDatesByWeek: [],\n        daysOfWeek: [],\n        countOfApptInDaysOfWeek: [],\n        lineChartData: {},\n        weekAppointments: [],\n        presentations: [],\n        weeklySales: [],\n        polarChartData: {},\n        weeklyFilteredSales: [],\n        salesAmount: 0\n    }\n\n    \n\n    getDaysOfTheWeek = () => {\n        let beginningOfWeek = moment().startOf('week')\n        let daysOfWeek = []\n        //used knowledge of today's date and the start of the week to iterate days to the end of the week\n        daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n        for (let i = 1; i < 7; i++) {\n            daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n        }\n        return daysOfWeek\n    }\n\n    // console.log(moment().isSame(moment('2019-12-23'),'date'))\n    countOfApptInDaysOfWeek = (a, b) => {\n        let counts = []\n        for (let i = 0; i < a.length; i++) {\n            // initialize all the current week's days to a count of zero\n            let count = 0;\n            for (let j = 0; j < b.length; j++) {\n                //if there is a date that matches the current weekday, then increment that date's count by 1\n                if (moment(b[j]).isSame(moment(a[i]))) {\n                    count++\n                }\n            }\n            counts.push(count)\n        }\n        return counts\n    }\n\n    //  => {\n    //     console.log('hi')\n    // }\n\n\n    getWeeklyPresentations = () => {\n        let filteredAppointmentsByWeek = this.state.appointments.filter(appointment => moment(appointment.date).isSame(this.state.currentDate, 'week'))\n        let salesonWeeklyAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['made_sale?'])\n        this.setState(\n            { \n                weekAppointments: filteredAppointmentsByWeek,\n                weeklySales: salesonWeeklyAppointments  \n            }, () => this.setState({ polarChartData: this.setPolarChartData()  }));\n        let presentationAppointments = filteredAppointmentsByWeek.filter(appointment => appointment['presentation_made?'])\n        return presentationAppointments\n    }\n\n    setLineChartData = () => {\n        const chartData = {\n            labels: this.state.daysOfWeek,\n            datasets: [\n                {\n                    label: `${this.state.filteredAppointmentDatesByWeek.length} Appointments for the week`,\n                    data: this.state.countOfApptInDaysOfWeek,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n        }\n        return chartData\n    }\n\n    setPolarChartData = () => {\n        const polarChartData = {\n            labels: ['Appointments', 'Presentations', 'Sales'],\n            datasets: [\n                {\n                    label: `$Weekly Presentation`,\n                    data: [this.state.weekAppointments.length, this.state.presentations.length, this.state.weeklySales.length],\n                    backgroundColor: [\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n        }\n        return polarChartData\n    }\n\n    getSalesForTheCurrentWeek = (a, b) => {\n        // if (a === undefined || b === undefined) return\n            let sales = a // total of all sales user has\n            let weekSales = b // all this current week sales\n            let weekSalesids = weekSales.map(wSale => wSale.lead_id) //week sales are all the appointments\n            let weeklyFilteredSales = sales.filter(sale => weekSalesids.includes(sale.lead_id)) // want all of the total sales that correspond to the week\n            this.setState({ weeklyFilteredSales: [...weeklyFilteredSales]  });\n            //sum up all the annualized life premiums for the week\n            let salesAmount = weeklyFilteredSales.reduce((total, alp)=> {\n                return total + alp.annualized_life_premium\n            }, 0)\n            this.setState({ salesAmount: salesAmount  });\n    }\n\n    render() { \n        console.log(this.state)\n        // console.log(this.getSalesForTheCurrentWeek(this.state.currentUser.sales, this.state.weeklySales))\n        return ( \n            <div>\n                <h1>Metrics</h1>\n            <div className=\"metrics-page\">\n                <WeeklyAppointmentsMetric lineChartData={this.state.lineChartData}/>\n                <WeeklyProduction polarChartData={this.state.polarChartData}/>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default MetricsContainer;"]},"metadata":{},"sourceType":"module"}