{"ast":null,"code":"import _objectSpread from \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js\";\nimport React, { Component, Fragment } from 'react';\nimport ReactMapGL, { Marker, FlyToInterpolator } from 'react-map-gl';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {\n        width: 980,\n        height: 350,\n        latitude: 0,\n        longitude: 0,\n        zoom: 11\n      },\n      showDirections: false\n    };\n\n    this.showDirections = () => {\n      this.setState(_objectSpread({}, this.state, {\n        showDirections: !this.state.showDirections\n      }));\n    };\n\n    this.getLeadLocation = () => {\n      this.setState({\n        viewport: _objectSpread({}, this.state.viewport, {\n          latitude: parseFloat(this.props.lead.latitude),\n          longitude: parseFloat(this.props.lead.longitude)\n        })\n      });\n    };\n\n    this.getPositions = () => {\n      const _fitBounds = new WebMercatorViewport(this.state.viewport).fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]], {\n        padding: 30,\n        offset: [0, -35]\n      }),\n            longitude = _fitBounds.longitude,\n            latitude = _fitBounds.latitude,\n            zoom = _fitBounds.zoom;\n\n      const viewport = _objectSpread({}, this.state.viewport, {\n        longitude,\n        latitude,\n        zoom,\n        transitionDuration: 2000,\n        transitionInterpolator: new FlyToInterpolator()\n      });\n\n      this.setState({\n        viewport\n      });\n    };\n\n    this.initializeMapForDirections = () => {\n      let userLon = parseFloat(this.props.user.longitude);\n      let userLat = parseFloat(this.props.user.latitude);\n      let clientLon = parseFloat(this.props.lead.longitude);\n      let clientLat = parseFloat(this.props.lead.latitude); // if address is faulty \n\n      if (clientLon === 0 && clientLat === 0) return;\n      const map = this.reactMap.getMap();\n      const start = [userLon, userLat];\n      const end = [clientLon, clientLat];\n      const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`;\n\n      const getRoute = (start, end) => {\n        fetch(directionsApi).then(res => res.json()).then(res => {\n          if (res.routes === undefined) return; //added in case fake address\n\n          let data = res.routes[0]; // console.log(data)\n\n          let route = data.geometry.coordinates;\n          let geojson = {\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'LineString',\n              coordinates: route\n            }\n          };\n\n          if (map.getSource('route')) {\n            map.getSource('route').setData(geojson);\n          } else {\n            map.addLayer({\n              id: 'route',\n              type: 'line',\n              source: {\n                type: 'geojson',\n                data: {\n                  type: 'Feature',\n                  properties: {},\n                  geometry: {\n                    type: 'LineString',\n                    coordinates: geojson\n                  }\n                }\n              },\n              layout: {\n                'line-join': 'round',\n                'line-cap': 'round'\n              },\n              paint: {\n                'line-color': '#3887be',\n                'line-width': 5,\n                'line-opacity': 0.75\n              }\n            });\n          } //turn instructions here\n\n\n          const instructions = document.getElementById('instructions');\n          const steps = data.legs[0].steps; // console.log(steps)\n\n          const tripInstructions = [];\n\n          for (let i = 0; i < steps.length; i++) {\n            tripInstructions.push('<li>' + steps[i].maneuver.instruction + '</li>');\n            instructions.innerHTML = '<br><span class=\"duration\">Trip duration: ' + Math.floor(data.duration / 60) + ' min </span>' + tripInstructions.join('');\n          } // console.log(tripInstructions)\n\n        }); //end fetch\n      }; //end function getRoute\n\n\n      map.on('load', function () {\n        map.addLayer({\n          id: 'point',\n          type: 'circle',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'FeatureCollection',\n              features: [{\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'Point',\n                  coordinates: start\n                }\n              }]\n            }\n          },\n          //end source object of start position lon lat\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#3887be'\n          }\n        }); //end start map layer\n        // took out code from where var end is defined in tutorial\n\n        if (map.getLayer('end')) {\n          map.getSource('end').setData(end);\n        } else {\n          map.addLayer({\n            id: 'end',\n            type: 'circle',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'FeatureCollection',\n                features: [{\n                  type: 'Feature',\n                  properties: {},\n                  geometry: {\n                    type: 'Point',\n                    coordinates: end\n                  }\n                }]\n              }\n            },\n            // end source object of end position lon lat\n            paint: {\n              'circle-radius': 10,\n              'circle-color': '#f30'\n            }\n          }); //end end of map layer\n        }\n      });\n      getRoute(start, end);\n    };\n  }\n\n  //end initialize map for directions\n  render() {\n    return React.createElement(\"div\", {\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onMouseLeave: this.showDirections,\n      style: {\n        display: this.state.showDirections ? 'block' : 'none'\n      },\n      id: \"instructions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(ReactMapGL, Object.assign({\n      mapboxApiAccessToken: TOKEN,\n      mapStyle: \"mapbox://styles/mapbox/navigation-guidance-day-v4\"\n    }, this.state.viewport, {\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      ref: reactMap => this.reactMap = reactMap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.getPositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Get Positions\"), React.createElement(\"button\", {\n      onClick: this.initializeMapForDirections,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Show Route\"), React.createElement(\"button\", {\n      onClick: this.showDirections,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Get Directions\"), React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      latitude: parseFloat(this.props.lead.latitude),\n      longitude: parseFloat(this.props.lead.longitude),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Client\"), React.createElement(Marker, {\n      latitude: parseFloat(this.props.user.latitude),\n      longitude: parseFloat(this.props.user.longitude),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"You\"))));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Map.js"],"names":["React","Component","Fragment","ReactMapGL","Marker","FlyToInterpolator","WebMercatorViewport","TOKEN","process","env","REACT_APP_MAPBOX_TOKEN","Map","state","viewport","width","height","latitude","longitude","zoom","showDirections","setState","getLeadLocation","parseFloat","props","lead","getPositions","fitBounds","user","padding","offset","transitionDuration","transitionInterpolator","initializeMapForDirections","userLon","userLat","clientLon","clientLat","map","reactMap","getMap","start","end","directionsApi","getRoute","fetch","then","res","json","routes","undefined","data","route","geometry","coordinates","geojson","type","properties","getSource","setData","addLayer","id","source","layout","paint","instructions","document","getElementById","steps","legs","tripInstructions","i","length","push","maneuver","instruction","innerHTML","Math","floor","duration","join","on","features","getLayer","render","display"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport ReactMapGL, {Marker,  FlyToInterpolator} from 'react-map-gl'\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport \"mapbox-gl/dist/mapbox-gl.css\"\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n\nclass Map extends Component {\n\n    state = { \n        viewport: {\n            width: 980,\n            height: 350,\n            latitude: 0,\n            longitude: 0,\n            zoom: 11\n        },\n        showDirections: false\n    }\n    \n    showDirections = () => {\n        this.setState(\n            { \n                ...this.state,\n                showDirections: !this.state.showDirections  \n            })\n    }\n\n    getLeadLocation = () => {\n        this.setState(\n            {   \n                viewport: {...this.state.viewport, latitude: parseFloat(this.props.lead.latitude), longitude: parseFloat(this.props.lead.longitude)}\n            })\n    }\n\n    getPositions = () => {\n        const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n        .fitBounds([[parseFloat(this.props.lead.longitude), parseFloat(this.props.lead.latitude)], [parseFloat(this.props.user.longitude), parseFloat(this.props.user.latitude)]],{\n            padding: 30,\n            offset: [0, -35]\n        })\n        const viewport = {\n            ...this.state.viewport,\n            longitude,\n            latitude,\n            zoom,\n            transitionDuration: 2000,\n            transitionInterpolator: new FlyToInterpolator(),\n            \n        }\n        this.setState({viewport})\n    }\n\n    // componentDidMount() {\n    //     this.getLeadLocation()\n    //     this.initializeMapForDirections()\n    // }\n    \n    initializeMapForDirections = () => {\n\n        let userLon =  parseFloat(this.props.user.longitude)\n        let userLat = parseFloat(this.props.user.latitude)\n        let clientLon = parseFloat(this.props.lead.longitude)\n        let clientLat = parseFloat(this.props.lead.latitude)\n\n        // if address is faulty \n        if (clientLon === 0 && clientLat === 0) return\n\n        const map = this.reactMap.getMap()\n        const start = [userLon, userLat]\n        const end = [clientLon, clientLat]\n        \n        const directionsApi = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${TOKEN}`\n\n        const getRoute = (start, end) => {\n            fetch(directionsApi).then(res => res.json()).then(res => {\n                if (res.routes === undefined) return //added in case fake address\n                let data = res.routes[0]\n                // console.log(data)\n                let route = data.geometry.coordinates\n                let geojson = {\n                    type: 'Feature',\n                    properties: {},\n                    geometry: {\n                        type: 'LineString',\n                        coordinates: route\n                    }\n                }\n                \n                if (map.getSource('route')){\n                    map.getSource('route').setData(geojson)\n                } else {\n                    map.addLayer({\n                        id: 'route',\n                        type: 'line',\n                        source: {\n                            type: 'geojson',\n                            data: {\n                                type: 'Feature',\n                                properties: {},\n                                geometry: {\n                                    type: 'LineString',\n                                    coordinates: geojson\n                                }\n                            }\n                        },\n                        layout: {\n                            'line-join': 'round',\n                            'line-cap': 'round'\n                        },\n                        paint: {\n                            'line-color': '#3887be',\n                            'line-width': 5,\n                            'line-opacity': 0.75\n                        }\n                    })\n                }\n                //turn instructions here\n                const instructions = document.getElementById('instructions')\n                const steps = data.legs[0].steps\n                // console.log(steps)\n                \n                const tripInstructions = []\n                for (let i = 0; i < steps.length; i++) {\n                    tripInstructions.push('<li>' + steps[i].maneuver.instruction + '</li>')\n                    instructions.innerHTML = '<br><span class=\"duration\">Trip duration: ' + Math.floor(data.duration / 60) + ' min </span>' + tripInstructions.join('')\n                }\n                // console.log(tripInstructions)\n            }) //end fetch\n        } //end function getRoute\n        \n        map.on('load', function() {\n            map.addLayer({\n                id: 'point',\n                type: 'circle',\n                source: {\n                    type: 'geojson',\n                    data: {\n                        type: 'FeatureCollection',\n                        features: [{\n                            type: 'Feature',\n                            properties: {},\n                            geometry: {\n                                type:'Point',\n                                coordinates: start\n                            }\n                        }]\n                    }\n                }, //end source object of start position lon lat\n                paint: {\n                    'circle-radius': 10,\n                    'circle-color': '#3887be'\n                }\n            }) //end start map layer\n            // took out code from where var end is defined in tutorial\n            if (map.getLayer('end')) {\n                map.getSource('end').setData(end)\n            } else {\n                map.addLayer({\n                    id: 'end',\n                    type: 'circle',\n                    source: {\n                        type: 'geojson',\n                        data: {\n                            type: 'FeatureCollection',\n                            features: [{\n                                type: 'Feature',\n                                properties: {},\n                                geometry: {\n                                    type: 'Point',\n                                    coordinates: end\n                                }\n                            }]\n                        }\n                    }, // end source object of end position lon lat\n                    paint: {\n                        'circle-radius': 10,\n                        'circle-color': '#f30'\n                    }\n                }) //end end of map layer\n            }\n        })\n        getRoute(start, end)\n    } //end initialize map for directions\n\n    render() {  \n        return ( \n            <div className=\"map\">\n                <div onMouseLeave={this.showDirections} \n                style={{display: this.state.showDirections ? 'block' : 'none'}} \n                id=\"instructions\"></div>\n                <ReactMapGL\n                    mapboxApiAccessToken={TOKEN}\n                    mapStyle='mapbox://styles/mapbox/navigation-guidance-day-v4'\n                    {...this.state.viewport}\n                    onViewportChange={(viewport) => this.setState({viewport})}\n                    ref={(reactMap) => this.reactMap = reactMap}>\n\n                    <button onClick={this.getPositions}>Get Positions</button>\n                    <button onClick={this.initializeMapForDirections}>Show Route</button>\n                    <button onClick={this.showDirections}>Get Directions</button>\n\n                        <Fragment>\n                            <Marker latitude={parseFloat(this.props.lead.latitude)} longitude={parseFloat(this.props.lead.longitude)}>\n                                Client\n                            </Marker>\n                            <Marker latitude={parseFloat(this.props.user.latitude)} longitude={parseFloat(this.props.user.longitude)}>\n                                You\n                            </Marker>\n                        </Fragment>\n\n                </ReactMapGL>\n            </div>\n        )\n    }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}