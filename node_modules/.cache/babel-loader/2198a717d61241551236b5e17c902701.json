{"ast":null,"code":"var _jsxFileName = \"/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Metrics.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nclass Metrics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: this.props.currentUser,\n      currentDate: moment(),\n      appointmentDates: [],\n      filteredDatesByWeek: [],\n      daysOfWeek: []\n    };\n\n    this.getDaysOfTheWeek = () => {\n      let beginningOfWeek = moment().startOf('week');\n      let daysOfWeek = []; //used knowledge of today's date and the start of the week to iterate days to the end of the week\n\n      daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'));\n\n      for (let i = 1; i < 7; i++) {\n        daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'));\n      }\n\n      return daysOfWeek;\n    };\n\n    this.countOfApptInDaysOfWeek = (a, b) => {\n      let counts = [];\n\n      for (let i = 0; i < a.length; i++) {\n        let count = 0;\n\n        for (let j = 0; j < b.length; j++) {\n          if (b[j] === a[i]) {\n            count++;\n          }\n        }\n\n        counts.push(count);\n      }\n\n      return counts;\n    };\n\n    this.setChartData = () => {\n      const chartData = {\n        labels: this.state.daysOfWeek,\n        datasets: [{\n          label: 'Appointments per week',\n          data: []\n        }]\n      };\n    };\n  }\n\n  componentDidMount() {\n    let newDates, filteredDatesByWeek; //take all appointments\n\n    newDates = this.props.currentUser.appointments.map(appointment => appointment.date); //take appointments and filter them by current week\n    //compare today's date with the array of appointments\n\n    filteredDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'));\n    this.setState({\n      appointmentDates: [...this.state.appointmentDates, newDates],\n      filteredDatesByWeek: [...this.state.filteredDatesByWeek, filteredDatesByWeek],\n      daysOfWeek: [...this.state.daysOfWeek, this.getDaysOfTheWeek()]\n    });\n  }\n\n  render() {\n    console.log('i am the state ', this.state); // console.log(this.state.currentDate.toDate())\n    // let beginningOfWeek = moment().startOf('week').add(6, 'days').toDate()\n    // let endOfWeek = moment().endOf('week').date()\n    // console.log('i am the days of the week ',this.getDaysOfTheWeek())\n\n    console.log(this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredDatesByWeek));\n    return React.createElement(\"div\", {\n      className: \"metrics-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Metrics\"));\n  }\n\n}\n\nexport default Metrics;","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/src/containers/Metrics.js"],"names":["React","Component","moment","Bar","Line","Pie","Metrics","state","currentUser","props","currentDate","appointmentDates","filteredDatesByWeek","daysOfWeek","getDaysOfTheWeek","beginningOfWeek","startOf","push","format","i","add","countOfApptInDaysOfWeek","a","b","counts","length","count","j","setChartData","chartData","labels","datasets","label","data","componentDidMount","newDates","appointments","map","appointment","date","filter","isSame","setState","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment'\nimport { Bar, Line, Pie} from 'react-chartjs-2'\n\nclass Metrics extends Component {\n    state = { \n        currentUser: this.props.currentUser,\n        currentDate: moment(),\n        appointmentDates: [],\n        filteredDatesByWeek: [],\n        daysOfWeek: []\n    }\n\n    componentDidMount() {\n        let newDates, filteredDatesByWeek\n        //take all appointments\n        newDates = this.props.currentUser.appointments.map(appointment => appointment.date)\n        //take appointments and filter them by current week\n        //compare today's date with the array of appointments\n        filteredDatesByWeek = newDates.filter(date => moment(date).isSame(this.state.currentDate, 'week'))\n        this.setState(\n            { \n                appointmentDates: [...this.state.appointmentDates, newDates],\n                filteredDatesByWeek: [...this.state.filteredDatesByWeek, filteredDatesByWeek],\n                daysOfWeek: [...this.state.daysOfWeek, this.getDaysOfTheWeek()]\n            })\n    }\n\n    getDaysOfTheWeek = () => {\n        let beginningOfWeek = moment().startOf('week')\n        let daysOfWeek = []\n        //used knowledge of today's date and the start of the week to iterate days to the end of the week\n        daysOfWeek.push(beginningOfWeek.format('YYYY-MM-DD'))\n        for (let i = 1; i < 7; i++) {\n            daysOfWeek.push(beginningOfWeek.add(1, 'days').format('YYYY-MM-DD'))\n        }\n        return daysOfWeek\n    }\n\n    countOfApptInDaysOfWeek = (a, b) => {\n        let counts = []\n        for (let i = 0; i < a.length; i++) {\n            let count = 0;\n            for (let j = 0; j < b.length; j++) {\n                if (b[j] === a[i]) {\n                    count++\n                }\n            }\n            counts.push(count)\n        }\n        return counts\n    }\n\n    setChartData = () => {\n        const chartData = {\n            labels: this.state.daysOfWeek,\n            datasets: [\n                {\n                    label: 'Appointments per week',\n                    data: [\n\n                    ]\n                }\n            ]\n        }\n    }\n\n\n    render() {\n        \n        console.log('i am the state ',this.state)\n        // console.log(this.state.currentDate.toDate())\n        \n        // let beginningOfWeek = moment().startOf('week').add(6, 'days').toDate()\n        // let endOfWeek = moment().endOf('week').date()\n        // console.log('i am the days of the week ',this.getDaysOfTheWeek())\n        console.log(this.countOfApptInDaysOfWeek(this.state.daysOfWeek, this.state.filteredDatesByWeek))\n\n       \n       \n        return ( \n            <div className=\"metrics-page\">\n                <h1>Metrics</h1>\n                {/* <Bar \n                    data={\n                    \n                    }\n                /> */}\n            </div>\n        );\n    }\n}\n\nexport default Metrics;"]},"metadata":{},"sourceType":"module"}