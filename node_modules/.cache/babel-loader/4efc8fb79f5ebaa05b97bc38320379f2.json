{"ast":null,"code":"import Geocoder from './geocoder';\nimport template from 'lodash.template';\nimport isEqual from 'lodash.isequal';\nimport extent from 'turf-extent';\n\nlet fs = require('fs'); // substack/brfs#39\n\n\nlet tmpl = template(fs.readFileSync(__dirname + '/../templates/inputs.html', 'utf8'));\n/**\n * Inputs controller\n *\n * @param {HTMLElement} el Summary parent container\n * @param {Object} store A redux store\n * @param {Object} actions Actions an element can dispatch\n * @param {Object} map The mapboxgl instance\n * @private\n */\n\nexport default class Inputs {\n  constructor(el, store, actions, map) {\n    const _store$getState = store.getState(),\n          originQuery = _store$getState.originQuery,\n          destinationQuery = _store$getState.destinationQuery,\n          profile = _store$getState.profile,\n          controls = _store$getState.controls;\n\n    el.innerHTML = tmpl({\n      originQuery,\n      destinationQuery,\n      profile,\n      controls\n    });\n    this.container = el;\n    this.actions = actions;\n    this.store = store;\n    this._map = map;\n    this.onAdd();\n    this.render();\n  }\n\n  animateToCoordinates(mode, coords) {\n    const _this$store$getState = this.store.getState(),\n          origin = _this$store$getState.origin,\n          destination = _this$store$getState.destination;\n\n    if (origin.geometry && destination.geometry && !isEqual(origin.geometry, destination.geometry)) {\n      // Animate map to fit bounds.\n      const bb = extent({\n        type: 'FeatureCollection',\n        features: [origin, destination]\n      });\n\n      this._map.fitBounds([[bb[0], bb[1]], [bb[2], bb[3]]], {\n        padding: 80\n      });\n    } else {\n      this._map.flyTo({\n        center: coords\n      });\n    }\n  }\n\n  onAdd() {\n    const _this$actions = this.actions,\n          clearOrigin = _this$actions.clearOrigin,\n          clearDestination = _this$actions.clearDestination,\n          createOrigin = _this$actions.createOrigin,\n          createDestination = _this$actions.createDestination,\n          setProfile = _this$actions.setProfile,\n          reverse = _this$actions.reverse;\n\n    const _this$store$getState2 = this.store.getState(),\n          geocoder = _this$store$getState2.geocoder,\n          accessToken = _this$store$getState2.accessToken,\n          flyTo = _this$store$getState2.flyTo,\n          placeholderOrigin = _this$store$getState2.placeholderOrigin,\n          placeholderDestination = _this$store$getState2.placeholderDestination,\n          zoom = _this$store$getState2.zoom;\n\n    this.originInput = new Geocoder(Object.assign({}, {\n      accessToken\n    }, geocoder, {\n      flyTo,\n      placeholder: placeholderOrigin,\n      zoom\n    }));\n    const originEl = this.originInput.onAdd(this._map);\n    const originContainerEl = this.container.querySelector('#mapbox-directions-origin-input');\n    originContainerEl.appendChild(originEl);\n    this.destinationInput = new Geocoder(Object.assign({}, {\n      accessToken\n    }, geocoder, {\n      flyTo,\n      placeholder: placeholderDestination,\n      zoom\n    }));\n    const destinationEl = this.destinationInput.onAdd(this._map);\n    this.container.querySelector('#mapbox-directions-destination-input').appendChild(destinationEl);\n    this.originInput.on('result', e => {\n      const coords = e.result.center;\n      createOrigin(coords);\n      this.animateToCoordinates('origin', coords);\n    });\n    this.originInput.on('clear', clearOrigin);\n    this.destinationInput.on('result', e => {\n      const coords = e.result.center;\n      createDestination(coords);\n      this.animateToCoordinates('destination', coords);\n    });\n    this.destinationInput.on('clear', clearDestination); // Driving / Walking / Cycling profiles\n\n    const profiles = this.container.querySelectorAll('input[type=\"radio\"]');\n    Array.prototype.forEach.call(profiles, el => {\n      el.addEventListener('change', () => {\n        setProfile(el.value);\n      });\n    }); // Reversing Origin / Destination\n\n    this.container.querySelector('.js-reverse-inputs').addEventListener('click', () => {\n      const _this$store$getState3 = this.store.getState(),\n            origin = _this$store$getState3.origin,\n            destination = _this$store$getState3.destination;\n\n      if (origin) this.actions.queryDestination(origin.geometry.coordinates);\n      if (destination) this.actions.queryOrigin(destination.geometry.coordinates);\n      reverse();\n    });\n  }\n\n  render() {\n    this.store.subscribe(() => {\n      const _this$store$getState4 = this.store.getState(),\n            originQuery = _this$store$getState4.originQuery,\n            destinationQuery = _this$store$getState4.destinationQuery,\n            originQueryCoordinates = _this$store$getState4.originQueryCoordinates,\n            destinationQueryCoordinates = _this$store$getState4.destinationQueryCoordinates;\n\n      if (originQuery) {\n        this.originInput.query(originQuery);\n        this.actions.queryOrigin(null);\n      }\n\n      if (destinationQuery) {\n        this.destinationInput.query(destinationQuery);\n        this.actions.queryDestination(null);\n      }\n\n      if (originQueryCoordinates) {\n        this.originInput.setInput(originQueryCoordinates);\n        this.animateToCoordinates('origin', originQueryCoordinates);\n        this.actions.queryOriginCoordinates(null);\n      }\n\n      if (destinationQueryCoordinates) {\n        this.destinationInput.setInput(destinationQueryCoordinates);\n        this.animateToCoordinates('destination', destinationQueryCoordinates);\n        this.actions.queryDestinationCoordinates(null);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/altafquadri/Development/code/Mod5Project/Frontend/lead-us-react/node_modules/@mapbox/mapbox-gl-directions/src/controls/inputs.js"],"names":["Geocoder","template","isEqual","extent","fs","require","tmpl","readFileSync","__dirname","Inputs","constructor","el","store","actions","map","getState","originQuery","destinationQuery","profile","controls","innerHTML","container","_map","onAdd","render","animateToCoordinates","mode","coords","origin","destination","geometry","bb","type","features","fitBounds","padding","flyTo","center","clearOrigin","clearDestination","createOrigin","createDestination","setProfile","reverse","geocoder","accessToken","placeholderOrigin","placeholderDestination","zoom","originInput","Object","assign","placeholder","originEl","originContainerEl","querySelector","appendChild","destinationInput","destinationEl","on","e","result","profiles","querySelectorAll","Array","prototype","forEach","call","addEventListener","value","queryDestination","coordinates","queryOrigin","subscribe","originQueryCoordinates","destinationQueryCoordinates","query","setInput","queryOriginCoordinates","queryDestinationCoordinates"],"mappings":"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","sourcesContent":["import Geocoder from './geocoder';\nimport template from 'lodash.template';\nimport isEqual from 'lodash.isequal';\nimport extent from 'turf-extent';\n\nlet fs = require('fs'); // substack/brfs#39\nlet tmpl = template(fs.readFileSync(__dirname + '/../templates/inputs.html', 'utf8'));\n\n/**\n * Inputs controller\n *\n * @param {HTMLElement} el Summary parent container\n * @param {Object} store A redux store\n * @param {Object} actions Actions an element can dispatch\n * @param {Object} map The mapboxgl instance\n * @private\n */\nexport default class Inputs {\n  constructor(el, store, actions, map) {\n    const { originQuery, destinationQuery, profile, controls } = store.getState();\n\n    el.innerHTML = tmpl({\n      originQuery,\n      destinationQuery,\n      profile,\n      controls\n    });\n\n    this.container = el;\n    this.actions = actions;\n    this.store = store;\n    this._map = map;\n\n    this.onAdd();\n    this.render();\n  }\n\n  animateToCoordinates(mode, coords) {\n    const { origin, destination } = this.store.getState();\n\n    if (origin.geometry &&\n        destination.geometry &&\n        !isEqual(origin.geometry, destination.geometry)) {\n\n      // Animate map to fit bounds.\n      const bb = extent({\n        type: 'FeatureCollection',\n        features: [origin, destination]\n      });\n\n      this._map.fitBounds([[bb[0], bb[1]], [bb[2], bb[3]]], { padding: 80 });\n    } else {\n      this._map.flyTo({ center: coords });\n    }\n  }\n\n  onAdd() {\n    const {\n      clearOrigin,\n      clearDestination,\n      createOrigin,\n      createDestination,\n      setProfile,\n      reverse\n    } = this.actions;\n\n    const { geocoder, accessToken, flyTo, placeholderOrigin, placeholderDestination, zoom } = this.store.getState();\n\n    this.originInput = new Geocoder(Object.assign({}, {\n      accessToken\n    }, geocoder, {flyTo, placeholder: placeholderOrigin, zoom}));\n\n    const originEl = this.originInput.onAdd(this._map);\n    const originContainerEl = this.container.querySelector('#mapbox-directions-origin-input');\n    originContainerEl.appendChild(originEl);\n\n    this.destinationInput = new Geocoder(Object.assign({}, {\n      accessToken\n    }, geocoder, {flyTo, placeholder: placeholderDestination, zoom}));\n\n    const destinationEl = this.destinationInput.onAdd(this._map);\n    this.container.querySelector('#mapbox-directions-destination-input').appendChild(destinationEl);\n\n    this.originInput.on('result', (e) => {\n      const coords = e.result.center;\n      createOrigin(coords);\n      this.animateToCoordinates('origin', coords);\n    });\n\n    this.originInput.on('clear', clearOrigin);\n\n    this.destinationInput.on('result', (e) => {\n      const coords = e.result.center;\n      createDestination(coords);\n      this.animateToCoordinates('destination', coords);\n    });\n\n    this.destinationInput.on('clear', clearDestination);\n\n    // Driving / Walking / Cycling profiles\n    const profiles = this.container.querySelectorAll('input[type=\"radio\"]');\n    Array.prototype.forEach.call(profiles, (el) => {\n      el.addEventListener('change', () => {\n        setProfile(el.value);\n      });\n    });\n\n    // Reversing Origin / Destination\n    this.container\n      .querySelector('.js-reverse-inputs')\n      .addEventListener('click', () => {\n        const { origin, destination } = this.store.getState();\n        if (origin) this.actions.queryDestination(origin.geometry.coordinates);\n        if (destination) this.actions.queryOrigin(destination.geometry.coordinates);\n        reverse();\n      });\n  }\n\n  render() {\n    this.store.subscribe(() => {\n      const {\n        originQuery,\n        destinationQuery,\n        originQueryCoordinates,\n        destinationQueryCoordinates\n      } = this.store.getState();\n\n      if (originQuery) {\n        this.originInput.query(originQuery);\n        this.actions.queryOrigin(null);\n      }\n\n      if (destinationQuery) {\n        this.destinationInput.query(destinationQuery);\n        this.actions.queryDestination(null);\n      }\n\n      if (originQueryCoordinates) {\n        this.originInput.setInput(originQueryCoordinates);\n        this.animateToCoordinates('origin', originQueryCoordinates);\n        this.actions.queryOriginCoordinates(null);\n      }\n\n      if (destinationQueryCoordinates) {\n        this.destinationInput.setInput(destinationQueryCoordinates);\n        this.animateToCoordinates('destination', destinationQueryCoordinates);\n        this.actions.queryDestinationCoordinates(null);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}